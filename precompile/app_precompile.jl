precompile(Tuple{Type{Base.VersionNumber}, Int32, Int32, Int32})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(InverseFunctions.__init__)})
precompile(Tuple{typeof(Accessors.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.getproperty), Base.GenericCondition{Base.ReentrantLock}, Symbol})
precompile(Tuple{Distributed.var"#137#139"})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.pkgdir), Module})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{Type{Main.Nuc}, Int32})
precompile(Tuple{typeof(Base.filter), Function, Tuple{}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{typeof(Test._check_testset), Type, Expr})
precompile(Tuple{Type{NamedTuple{(:source,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.copy), Random.TaskLocalRNG})
precompile(Tuple{typeof(Base.vect), UInt8, Vararg{UInt8}})
precompile(Tuple{typeof(Base.:(+)), UInt8, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.Libc.RawFD, Base.Libc.RawFD})
precompile(Tuple{typeof(Base.:(&)), Int32, Int32})
precompile(Tuple{typeof(Base.:(>)), Int32, Int64})
precompile(Tuple{typeof(Base.cconvert), Type, Base.Libc.RawFD})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Base.Libc.RawFD}, Base.Libc.RawFD})
precompile(Tuple{Type{NamedTuple{(:shared,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{40}})
precompile(Tuple{typeof(Base.:(|)), UInt64, UInt64})
precompile(Tuple{typeof(Base.isequal), Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{1, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.:(~)), UInt8})
precompile(Tuple{typeof(IntArrays.mask), Type{UInt8}, Int64})
precompile(Tuple{Type{IntArrays.IntArray{1, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{1, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{typeof(Base.:(>>)), UInt8, Int64})
precompile(Tuple{typeof(Base.:(&)), UInt8, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(Base.copy!), Random.TaskLocalRNG, Random.Xoshiro})
precompile(Tuple{typeof(Random.set_global_seed!), Int64})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{2, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{2, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{2, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}}, Tuple{IndexableBitVectors.SucVector, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{24}})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{UInt8}, Int64})
precompile(Tuple{Type{Array{UInt32, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{1, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt32, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vect), Main.Nuc, Vararg{Main.Nuc}})
precompile(Tuple{Type{Main.DNASeq}, Array{Main.Nuc, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, Main.DNASeq, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, Main.DNASeq, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{8}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{16}})
precompile(Tuple{Type{Array{UInt16, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt16, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Array{UInt16, 1}, Int64, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt16, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{10}})
precompile(Tuple{Type{NamedTuple{(:mmap,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mmap,), Tuple{Bool}}, Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Mmap.mmap), Type{Array{UInt16, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.fixup_stdlib_path), String})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{NamedTuple{(:segments,), T} where T<:Tuple}, Tuple{Tuple{String}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:segments,), Tuple{Tuple{String}}}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:segments,), Tuple{Tuple{String}}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Tuple{String}, Tuple{Symbol}, NamedTuple{(:segments,), Tuple{Tuple{String}}}}})
precompile(Tuple{typeof(Base.values), Base.Pairs{Symbol, Tuple{String}, Tuple{Symbol}, NamedTuple{(:segments,), Tuple{Tuple{String}}}}})
precompile(Tuple{Type{FilePathsBase.PosixPath}, Tuple{String}})
precompile(Tuple{FilePathsBase.var"##PosixPath#45", String, Type{FilePathsBase.PosixPath}, Tuple{String}})
precompile(Tuple{Type{FilePathsBase.PosixPath}, Tuple{String}, String})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#995", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.restore), CHOPOFF.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{typeof(Base.:(==)), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{Type{Array{UInt8, 1}}, String})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{7, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{7, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{7, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}}, NTuple{7, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt8, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.restore), CHOPOFF.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.restore), CHOPOFF.FMIndexes.FMIndex{2, UInt8}})
precompile(Tuple{typeof(Random.randstring), Int64})
precompile(Tuple{typeof(Base.count), Array{UInt8, 1}, CHOPOFF.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt16, 1}})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{Int64, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, String, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, String, Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.count), String, CHOPOFF.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.locateall), Array{UInt8, 1}, CHOPOFF.FMIndexes.FMIndex{1, UInt8}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Int64, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.locate), String, CHOPOFF.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(Base.:(|>)), CHOPOFF.FMIndexes.LocationIterator{7, UInt8}, typeof(Base.collect)})
precompile(Tuple{typeof(Base.:(|>)), Array{Any, 1}, typeof(Base.sort)})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.locateall), String, CHOPOFF.FMIndexes.FMIndex{7, UInt8}})
precompile(Tuple{typeof(Base.:(|>)), Array{Int64, 1}, typeof(Base.sort)})
precompile(Tuple{typeof(Base.isempty), CHOPOFF.FMIndexes.LocationIterator{7, UInt8}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.locateall), Array{UInt8, 1}, CHOPOFF.FMIndexes.FMIndex{2, UInt16}})
precompile(Tuple{Main.var"#linear_search#1", Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Combinatorics.permutations), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.iterate), Combinatorics.Permutations{Array{UInt8, 1}}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.locateall), Array{UInt8, 1}, CHOPOFF.FMIndexes.FMIndex{2, UInt8}})
precompile(Tuple{typeof(Base.iterate), Combinatorics.Permutations{Array{UInt8, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.read), String})
precompile(Tuple{typeof(Base.copy), Array{UInt8, 1}})
precompile(Tuple{Type{NamedTuple{(:r,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:r,), Tuple{Int64}}, Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, String})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, Base.CodeUnits{UInt8, String}, Array{UInt16, 1}, Int64, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{7, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt16, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(Base.count), String, CHOPOFF.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.locateall), String, CHOPOFF.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{typeof(Base.something), Nothing, Base.UnitRange{Int64}})
precompile(Tuple{Main.var"#linear_search_#2", String, String})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.restore), CHOPOFF.FMIndexes.FMIndex{7, UInt16}})
precompile(Tuple{Base.var"##printstyled#995", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base.Filesystem.tempname)})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{typeof(Base.readlines), String})
precompile(Tuple{Type{Base.Set{T} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.Set{String}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{String, 1}}}})
precompile(Tuple{Type{NamedTuple{(:prog, :description, :epilog, :version, :add_version), T} where T<:Tuple}, Tuple{String, String, String, String, Bool}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{19, Symbol}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, String}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, String}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, String}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, Symbol}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{Symbol, Symbol}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Symbol}, Int64, Int64})
precompile(Tuple{Base.var"#54#55", Type, Type})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, UInt64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Char})
precompile(Tuple{typeof(Base.trailing_zeros), Int64})
precompile(Tuple{typeof(BioSequences.bitindex), BioSequences.BitsPerSymbol{4}, Type{UInt64}, Int64})
precompile(Tuple{typeof(BioSequences.index), BioSequences.BitIndex{4, UInt64}})
precompile(Tuple{typeof(BioSequences.offset), BioSequences.BitIndex{4, UInt64}})
precompile(Tuple{typeof(Base.:(+)), BioSequences.BitIndex{4, UInt64}, Int64})
precompile(Tuple{typeof(Base.convert), Type{BioSymbols.DNA}, BioSymbols.DNA})
precompile(Tuple{Type{NamedTuple{(:eager,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(TranscodingStreams.throw_panic_error)})
precompile(Tuple{typeof(Base.first), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(SplittablesBase.amount), Nothing})
precompile(Tuple{typeof(ThreadsX.Implementations.default_basesize), Nothing})
precompile(Tuple{Type{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}}, Type})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Transducers.NoopDACContext, Transducers.NoopDACContext}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Transducers.NoopDACContext, Transducers.NoopDACContext}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{BioSequences.var"#11#12"}, Symbol})
precompile(Tuple{typeof(Base.sum), Tuple{Int64}})
precompile(Tuple{Transducers.AutoObjectsReStacker.var"##s1#1", Any, Any})
precompile(Tuple{ConstructionBase.var"##s26#1", Any, Any, Any})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(Base.argtail), BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Char, Base.Val{4}})
precompile(Tuple{Type{NamedTuple{(:context,), T} where T<:Tuple}, Tuple{Pair{Symbol, Module}}})
precompile(Tuple{typeof(Base.first), Tuple{Bool, Nothing}})
precompile(Tuple{typeof(Base._any_tuple), Base.var"#48#49", Bool, Type})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{BioSequences.var"#7#8"}, Symbol})
precompile(Tuple{BioSymbols.var"##s9#13", Any, Any, Any})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:init,), Tuple{UInt64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, UInt64, Tuple{Symbol}, NamedTuple{(:init,), Tuple{UInt64}}}})
precompile(Tuple{Type{Base.UnitRange{UInt32}}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.UnitRange{UInt32}}, Base.UnitRange{UInt32}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:simd,), Tuple{Base.Val{true}}}, Tuple{Symbol}})
precompile(Tuple{Base.var"##s128#247", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.eltype), Type{Union{}}})
precompile(Tuple{typeof(Base.:(>)), UInt64, Int64})
precompile(Tuple{typeof(Base.:(>=)), UInt64, UInt64})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.vcat)}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.Checked.checked_mul)}, Symbol})
precompile(Tuple{typeof(Base.:(*)), Vararg{String, 4}})
precompile(Tuple{typeof(Base.axes), Base.HasLength})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:style,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.getproperty), WeakRefStrings.WeakRefString{UInt8}, Symbol})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{SentinelArrays.var"#39#40"{Base.ExtremaMap{typeof(Base.identity)}, typeof(Base._extrema_rf)}, Base.BottomRF{typeof(Base._extrema_rf)}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:style,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{typeof(CHOPOFF.isambig)}}}, Symbol})
precompile(Tuple{typeof(Base.:(∘)), Transducers.Enumerate{Int64}, Transducers.Map{typeof(CHOPOFF.isambig)}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{typeof(CHOPOFF.isambig)}, Symbol})
precompile(Tuple{typeof(Transducers.asfoldable), Transducers.TransducerFolder})
precompile(Tuple{typeof(Base.getproperty), Transducers.TransducerFolder, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{typeof(CHOPOFF.isambig)}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{typeof(CHOPOFF.isambig)}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{}, typeof(Base.identity)}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.BottomRF{typeof(Base.Checked.checked_mul)}, Tuple{}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.BottomRF{typeof(Base.Checked.checked_mul)}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.reduce), Function, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.Checked.checked_mul), Int64, Tuple{}})
precompile(Tuple{Type{NamedTuple{(:dt,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{17, Symbol}})
precompile(Tuple{typeof(Base.hasfield), Type, Symbol})
precompile(Tuple{Type{NamedTuple{(:modifier,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.:(*)), Vararg{Int64, 4}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, String}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#90#95"}}}, Symbol})
precompile(Tuple{typeof(Base.:(∘)), Transducers.Enumerate{Int64}, Transducers.Map{CHOPOFF.var"#90#95"}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{CHOPOFF.var"#90#95"}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#90#95"}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#90#95"}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#91#96"}}}, Symbol})
precompile(Tuple{typeof(Base.:(∘)), Transducers.Enumerate{Int64}, Transducers.Map{CHOPOFF.var"#91#96"}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{CHOPOFF.var"#91#96"}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#91#96"}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#91#96"}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#92#97"}}}, Symbol})
precompile(Tuple{typeof(Base.:(∘)), Transducers.Enumerate{Int64}, Transducers.Map{CHOPOFF.var"#92#97"}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{CHOPOFF.var"#92#97"}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#92#97"}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#92#97"}}}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:ignore_predictor,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:ignore_predictor,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:ignore_predictor,), Tuple{Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:ignore_predictor,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.:(&)), Int64, Bool})
precompile(Tuple{typeof(Base.log), Float64})
precompile(Tuple{typeof(Base.log), Int64})
precompile(Tuple{typeof(Base.:(-)), UInt32, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), Type{UInt32}, Int64})
precompile(Tuple{Base.var"##s125#240", Any, Any, Any})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#241#243"{DataType, Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Base.var"#241#243"{DataType, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Automa.Machine, Symbol})
precompile(Tuple{typeof(BioGenerics.Exceptions.missingerror), Symbol})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{String, 1}, Array{Base.UnitRange{Int64}, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{String, 1}, Array{Base.UnitRange{Int64}, 1}}}, Int64})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{typeof(Base.fieldtypes), Type})
precompile(Tuple{typeof(Base.ntupleany), Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{typeof(Base.Iterators.map), Function, Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.eltype), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{DataType, DataType}, typeof(Base.eltype)}, Symbol})
precompile(Tuple{typeof(Base.:(|)), Base.Missing, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, NTuple{4, Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, NTuple{4, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Transducers.AutoObjectsReStacker.var"#4#7", Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.Iterators.map), Function, NTuple{4, DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.eltype), NTuple{4, DataType}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{NTuple{4, DataType}, typeof(Base.eltype)}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{InlineStrings.String1, InlineStrings.String127, InlineStrings.String15, InlineStrings.String255, InlineStrings.String3, InlineStrings.String31, InlineStrings.String63, InlineStrings.String7}}, String})
precompile(Tuple{typeof(Base.one), Type{Union{InlineStrings.String1, InlineStrings.String127, InlineStrings.String15, InlineStrings.String255, InlineStrings.String3, InlineStrings.String31, InlineStrings.String63, InlineStrings.String7}}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:dt,), Tuple{Int64}}, Type{NamedTuple{(:start, :barlen, :barglyphs), T} where T<:Tuple}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:dt,), Tuple{Int64}}})
precompile(Tuple{typeof(Base._any_tuple), Function, Bool})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}}}, Int64})
precompile(Tuple{Base.Fix2{typeof(Base.:(<)), Int64}, Int64})
precompile(Tuple{typeof(Base.cconvert), Type, Int8})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Int8}, Int8})
precompile(Tuple{Type{Base.KeyError}, BioSymbols.DNA})
precompile(Tuple{Base.var"#288#292"{Tuple{Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Int64})
precompile(Tuple{Type{NamedTuple{(:first_line,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:rev, :by), T} where T<:Tuple}, Tuple{Bool, CHOPOFF.var"#210#245"}})
precompile(Tuple{typeof(Base.getproperty), Transducers.PrivateState{Transducers.Reduction{Union{}, Transducers.BottomRF{Transducers.Completing{typeof(ThreadsX.Implementations.return_nothing)}}}, Nothing, Transducers.Unseen}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Transducers.Unseen}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Transducers.Unseen}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:makeunique, :copycols), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:makeunique,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:copycols, :keeprows, :renamecols), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.MissingOptimization{Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.IEEEFloatOptimization{SortingAlgorithms.TimSortAlg}, Symbol})
precompile(Tuple{Type{NamedTuple{(:unsafe,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Symbol})
precompile(Tuple{Type{NamedTuple{(:copycols, :renamecols, :threads), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(CSV.isvaliddelim), Char})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt8, UInt8}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UInt8, UInt8}, Int64, Int64})
precompile(Tuple{typeof(CSV.tup), Char})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{22}})
precompile(Tuple{typeof(Base.:(<=)), Int64, Int32})
precompile(Tuple{typeof(Base.getproperty), Base.Set{String}, Symbol})
precompile(Tuple{Type{NamedTuple{(:validate,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{}, FilePathsBase.var"#10#11"}, Symbol})
precompile(Tuple{Type{NamedTuple{(:ntasks,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:ntasks,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{47, Symbol}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Base.Missing, UInt32})
precompile(Tuple{Type{Pair{A, B} where B where A}, Function, Symbol})
precompile(Tuple{Type{NamedTuple{(:keepkeys, :ungroup, :copycols, :keeprows, :renamecols, :threads), T} where T<:Tuple}, NTuple{6, Bool}})
precompile(Tuple{Type{NamedTuple{(:separator,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(CHOPOFF.main), Array{String, 1}})
precompile(Tuple{ArgParse.var"#_#9#10", AbstractString, AbstractString, AbstractString, AbstractString, AbstractString, Bool, Bool, Integer, Integer, Any, Bool, Bool, Bool, Bool, Bool, Function, Bool, Bool, Bool, Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(ArgParse.check_prefix_chars), Any})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{ArgParse.ArgParseTable}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{ArgParse.var"##add_arg_field!#25", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(ArgParse.check_name_format), Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#26#28", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#26#28"}})
precompile(Tuple{ArgParse.var"#26#28", Any})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{ArgParse.ArgConsumerType}})
precompile(Tuple{Type{ArgParse.ArgConsumerType}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.check_type), Any, Type, AbstractString})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.check_action_is_valid), Symbol})
precompile(Tuple{typeof(ArgParse.check_nargs_and_action), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(ArgParse.is_flag_action), Symbol})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.is_command_action), Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(ArgParse.name_to_fieldnames!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#21"{ArgParse.ArgParseSettings, ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{ArgParse.var"#do_one#21"{ArgParse.ArgParseSettings, ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any})
precompile(Tuple{ArgParse.var"#do_one#21"{ArgParse.ArgParseSettings, ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any, Any})
precompile(Tuple{typeof(ArgParse.check_cmd_name), AbstractString})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(ArgParse.auto_dest_name), AbstractString, Array{AbstractString, 1}, Array{AbstractString, 1}, Bool})
precompile(Tuple{ArgParse.var"#r#22"{Bool}, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(ArgParse.get_group), AbstractString, ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.is_cmd), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(ArgParse.warn_extra_opts), Any, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.check_dest_name), AbstractString})
precompile(Tuple{ArgParse.var"#set_if_valid#30"{Array{Symbol, 1}, ArgParse.ArgParseField}, Any, Any})
precompile(Tuple{typeof(ArgParse.auto_metavar), AbstractString, Bool})
precompile(Tuple{typeof(ArgParse.check_metavar), AbstractString})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Type})
precompile(Tuple{typeof(ArgParse.get_cmd_prog_hint), ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.is_multi_action), Symbol})
precompile(Tuple{typeof(ArgParse.is_multi_nargs), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(ArgParse.check_default_type), Nothing, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Nothing, Function})
precompile(Tuple{typeof(ArgParse.convert_default), Type, Nothing})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Nothing})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(ArgParse.check_arg_makes_sense), ArgParse.ArgParseSettings, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.is_arg), ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.check_conflicts_with_commands), ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(ArgParse.check_for_duplicates), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.add_command!), ArgParse.ArgParseSettings, AbstractString, AbstractString, Bool})
precompile(Tuple{typeof(Base.haskey), ArgParse.ArgParseSettings, AbstractString})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(ArgParse.check_conflicts_with_commands), ArgParse.ArgParseSettings, AbstractString})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{typeof(Base.setindex!), ArgParse.ArgParseSettings, ArgParse.ArgParseSettings, AbstractString})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Any, String})
precompile(Tuple{typeof(Base.getindex), ArgParse.ArgParseSettings, AbstractString})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Function})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Bool})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(ArgParse.check_arg_name), AbstractString})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, String}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:help, :arg_type, :required), Tuple{String, DataType, Bool}}}})
precompile(Tuple{typeof(ArgParse.default_action), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(ArgParse.default_action), Symbol})
precompile(Tuple{ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Any})
precompile(Tuple{typeof(ArgParse.check_long_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(ArgParse.check_short_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help,), Tuple{String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:help,), Tuple{String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:help,), Tuple{String}}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol}})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Int64}}, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.check_default_type), Int64, Type})
precompile(Tuple{typeof(ArgParse.typecompatible), Int64, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Any, Function})
precompile(Tuple{ArgParse.var"#27#29", Any})
precompile(Tuple{typeof(ArgParse.convert_default), Type, Any})
precompile(Tuple{typeof(ArgParse._convert_default), Type, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.check_default_type), String, Type})
precompile(Tuple{typeof(ArgParse.typecompatible), String, Type})
precompile(Tuple{typeof(ArgParse._convert_default), Type, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, UInt64}}, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{UInt64, String, DataType}}}})
precompile(Tuple{typeof(ArgParse.check_default_type), UInt64, Type})
precompile(Tuple{typeof(ArgParse.typecompatible), UInt64, Type})
precompile(Tuple{typeof(ArgParse._convert_default), Type, UInt64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, UInt64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, CHOPOFF.var"#288#290"}, Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CHOPOFF.var"#288#290"}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CHOPOFF.var"#288#290"}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CHOPOFF.var"#288#290"}}}})
precompile(Tuple{CHOPOFF.var"#288#290", String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, CHOPOFF.var"#289#291"}, Pair{Symbol, String}}, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CHOPOFF.var"#289#291"}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CHOPOFF.var"#289#291"}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :arg_type, :range_tester), Tuple{String, String, DataType, CHOPOFF.var"#289#291"}}}})
precompile(Tuple{CHOPOFF.var"#289#291", String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Int64}, Pair{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type, :required), Tuple{Int64, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :arg_type, :required), Tuple{Int64, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:default, :help, :arg_type, :required), Tuple{Int64, String, DataType, Bool}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, String}, Pair{Symbol, DataType}, Pair{Symbol, Char}, Pair{Symbol, Bool}}, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:nargs, :help, :arg_type, :required), Tuple{Char, String, DataType, Bool}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:nargs, :help, :arg_type, :required), Tuple{Char, String, DataType, Bool}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, NTuple{4, Symbol}, NamedTuple{(:nargs, :help, :arg_type, :required), Tuple{Char, String, DataType, Bool}}}})
precompile(Tuple{typeof(ArgParse.default_action), Char})
precompile(Tuple{Type{ArgParse.ArgConsumerType}, Char})
precompile(Tuple{Type{Symbol}, Char, Vararg{Any}})
precompile(Tuple{typeof(ArgParse.check_default_type_multi), Nothing, Type})
precompile(Tuple{typeof(ArgParse.check_range_default_multi), Nothing, Function})
precompile(Tuple{typeof(ArgParse.convert_default_multi), Type, Nothing})
precompile(Tuple{Type{Array{Int64, N} where N}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{ArgParse.var"##parse_args#63", Bool, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#70#72", Array{String, 1}, Base.Colon})
precompile(Tuple{ArgParse.var"#70#72", Any})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{ArgParse.ParserState}, Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#65#67", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#64#66", Base.Iterators.Filter{ArgParse.var"#65#67", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#65#67", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#64#66"}})
precompile(Tuple{ArgParse.var"#65#67", Any})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{Type{NamedTuple{(:taskref, :spawn, :threadpool), T} where T<:Tuple}, Tuple{Nothing, Bool, Nothing}})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#650", Nothing, Bool, Nothing, Type{Base.Channel{Any}}, ArgParse.var"#71#73"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#651#652"{ArgParse.var"#71#73"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{ArgParse.var"#71#73"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Any})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(ArgParse.looks_like_an_option), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(ArgParse.parse_arg!), ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.length), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.getindex), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Int64})
precompile(Tuple{typeof(ArgParse.parse1_optarg!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Any, AbstractString})
precompile(Tuple{typeof(ArgParse.test_exclusive_groups!), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseSettings, ArgParse.ArgParseField, AbstractString})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{AbstractString}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{AbstractString}, AbstractString})
precompile(Tuple{typeof(ArgParse.test_range), Function, Any, AbstractString})
precompile(Tuple{ArgParse.var"#7#8", Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(ArgParse.idstring), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{typeof(ArgParse.found_command), ArgParse.ParserState})
precompile(Tuple{typeof(ArgParse.test_required_args), ArgParse.ArgParseSettings, Base.Set{AbstractString}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#39#43", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#38#42", Base.Iterators.Filter{ArgParse.var"#39#43", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#39#43", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#38#42"}})
precompile(Tuple{ArgParse.var"#39#43", Any})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.parse_command_args!), ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_long_opt!), ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.is_flag), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{String}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{String}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{Int64}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{Int64}, AbstractString})
precompile(Tuple{Base.var"#655#656"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(ArgParse.has_cmd), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:storage_path, :seed, :max_iterations, :max_count, :precision), Tuple{String, UInt64, Int64, Int64, DataType}}, typeof(CHOPOFF.build_hashDB), String, String, CHOPOFF.Motif})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.repeat), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(PathDistribution.path_enumeration), Int64, Int64, Array{Bool, 2}})
precompile(Tuple{typeof(Base.hashindex), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.isequal), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{Type{PathDistribution.PathEnum}, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#39#45"{Array{Int64, 1}}, Array{PathDistribution.PathEnum, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{PathDistribution.PathEnum, 1}, Base.Generator{Array{PathDistribution.PathEnum, 1}, CHOPOFF.var"#39#45"{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{PathDistribution.PathEnum, 1}, CHOPOFF.var"#39#45"{Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#40#46"{Array{Int64, 1}}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, CHOPOFF.var"#40#46"{Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#41#47"{Int64}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, CHOPOFF.var"#41#47"{Int64}}})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{CHOPOFF.var"#42#48"{Int64, Bool, CHOPOFF.Motif}, Base.BottomRF{typeof(Base.vcat)}}, Array{UInt8, 2}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(CHOPOFF.smallestutype), UInt64})
precompile(Tuple{typeof(Base.getindex), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.repeat), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.Iterators.product), Array{Int64, 1}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.repeat), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{Base.var"##s997#621", Vararg{Any, 6}})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Symbol, Expr, Vararg{Expr}})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr, Vararg{Expr}})
precompile(Tuple{typeof(Base.isperm), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.permutedims), Array{Int64, 2}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 2}, Array{Int64, 1}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}}}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Array{Int64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt8}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{2}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Array{Int64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Array{Int64, 2}}}})
precompile(Tuple{typeof(Base.vcat), Array{UInt8, 2}, Array{UInt8, 2}})
precompile(Tuple{typeof(Base.size), Array{UInt8, 2}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{CHOPOFF.var"#43#49"{Int64, Bool, CHOPOFF.Motif}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{UInt8, 2}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Array{Int64, 1}, 1, Array{Array{Int64, 1}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{UInt8, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.product), Array{Int64, 1}, Vararg{Array{Int64, 1}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}, Int64}}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#43#49"{Int64, Bool, CHOPOFF.Motif}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{UInt8, 2}, Array{UInt8, 2}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#43#49"{Int64, Bool, CHOPOFF.Motif}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{UInt8, 2}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{Type{DataFrames.DataFrame}, Array{UInt8, 2}, Symbol})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{UInt8, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{UInt8, 1}})
precompile(Tuple{typeof(DataFrames.nonunique), DataFrames.DataFrame})
precompile(Tuple{typeof(Base._array_for), Type{Array{UInt8, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{UInt8, 1}, 1}, Array{UInt8, 1}, Base.Generator{Base.UnitRange{Int64}, Base.var"#223#224"{DataFrames.var"#168#169"{DataFrames.DataFrame}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.refpool_and_array), NTuple{21, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{21, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{Base.ExtremaMap{typeof(Base.identity)}, typeof(Base._extrema_rf)}, Type{UInt8}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{21, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.first), NTuple{21, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{NTuple{21, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), NTuple{21, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{NTuple{21, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.any), Function, NTuple{21, DataFrames.IntegerRefpool{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{21, DataFrames.IntegerRefpool{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, NTuple{21, DataFrames.IntegerRefarray{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{21, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{21, Array{UInt8, 1}}, NTuple{21, DataFrames.IntegerRefpool{Int64}}, NTuple{21, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{21, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, NTuple{21, DataFrames.IntegerRefpool{Int64}}, NTuple{21, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 2}, Base.BitArray{1}, Function})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#44#50"{Array{Int64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CHOPOFF.var"#44#50"{Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.vcat), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.max)}, Type{UInt8}})
precompile(Tuple{typeof(Base.maximum), Array{UInt8, 2}})
precompile(Tuple{typeof(CHOPOFF.smallestutype), UInt8})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Array{UInt8, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{2}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Array{UInt8, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Array{UInt8, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{UInt8}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{UInt8}, Tuple{Array{UInt8, 1}}}})
precompile(Tuple{Type{CHOPOFF.PathTemplates}, Array{UInt8, 2}, Array{UInt8, 1}, Bool, CHOPOFF.Motif, Bool, Int64})
precompile(Tuple{typeof(Base.setproperty!), FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, Symbol, Int64})
precompile(Tuple{ThreadsX.Implementations.var"##map#73", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#54#56"{Bool, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#54#56"{Bool, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#54#56"{Bool, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#54#56"{Bool, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#54#56"{Bool, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Int64}})
precompile(Tuple{ThreadsX.Implementations.var"##map#73", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{Int64, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#64#68"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#64#68"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#64#68"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#64#68"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#64#68"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{typeof(CHOPOFF.isambig)}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{typeof(CHOPOFF.isambig)}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{typeof(CHOPOFF.isambig)}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{typeof(CHOPOFF.isambig)}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Bool, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Bool, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Bool, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.sum), Array{Bool, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(BioSequences.bitindex), BioSequences.BitsPerSymbol{2}, Type{UInt64}, Int64})
precompile(Tuple{typeof(BioSequences.offset), BioSequences.BitIndex{2, UInt64}})
precompile(Tuple{typeof(BioSequences.nextposition), BioSequences.BitIndex{2, UInt64}})
precompile(Tuple{typeof(Base.iszero), UInt64})
precompile(Tuple{typeof(BioSequences.index), BioSequences.BitIndex{2, UInt64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#63#67"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#63#67"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#63#67"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#63#67"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#63#67"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.min), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt8}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, UInt8}}}}})
precompile(Tuple{Type{Array{FastFilter.BinaryFuseFilter{UInt16}, 1}}})
precompile(Tuple{Type{Array{UInt8, 1}}})
precompile(Tuple{Base.Colon, Int64, UInt8})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.UseSIMD{false}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.UseSIMD{false}}, Int64, Int64})
precompile(Tuple{typeof(ThreadsX.findall), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.map), typeof(Base.oneto), Tuple{Int64}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{ThreadsX.Implementations.var"##findall#42", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.findall), CHOPOFF.var"#159#160"{Int64}, Array{UInt8, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CHOPOFF.var"#159#160"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CHOPOFF.var"#159#160"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CHOPOFF.var"#159#160"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CHOPOFF.var"#159#160"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{CHOPOFF.var"#159#160"{Int64}, Array{UInt8, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.push!), Array{UInt8, 1}, UInt8})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:seed, :max_iterations), Tuple{UInt64, Int64}}, Type{FastFilter.BinaryFuseFilter{UInt16}}, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.push!), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, FastFilter.BinaryFuseFilter{UInt16}})
precompile(Tuple{typeof(Base.sortperm), Array{UInt8, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{UInt64, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{UInt64, 1}, Array{UInt8, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(CHOPOFF.get_count_idx), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, UInt64, Bool})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.:(!=)), UInt8, UInt8})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{UInt64, 1}, Array{UInt8, 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{Type{CHOPOFF.HashDB{T, K} where K<:Union{UInt16, UInt32, UInt8} where T<:Unsigned}, CHOPOFF.DBInfo, CHOPOFF.PathTemplates, Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, Array{UInt8, 1}, Nothing})
precompile(Tuple{typeof(CHOPOFF.save), CHOPOFF.HashDB{UInt8, UInt16}, String})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt32})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{String, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Bool})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt64, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt64})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt8, 2}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt8, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{FastFilter.BinaryFuseFilter{UInt16}, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt16, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:digits,), Tuple{Int64}}, typeof(Base.round), Float64})
precompile(Tuple{typeof(Base.:(*)), Vararg{String, 5}})
precompile(Tuple{typeof(ArgParse.parse1_flag!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool, AbstractString})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, DataType})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{String, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{UInt8, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt8, 2}})
precompile(Tuple{Type{Array{FastFilter.BinaryFuseFilter{UInt16}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt16, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{FastFilter.BinaryFuseFilter{UInt16}, 1}, FastFilter.BinaryFuseFilter{UInt16}, Int64})
precompile(Tuple{typeof(CHOPOFF.search_hashDB), CHOPOFF.HashDB{UInt8, UInt16}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(!=)), Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt64}}}, typeof(Base.Broadcast.broadcasted_kwsyntax), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Base.Dict{BioSymbols.DNA, UInt64}, Tuple{Symbol}, NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt64}}}}, typeof(CHOPOFF.guide_to_template_format)}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Base.Dict{BioSymbols.DNA, UInt64}, Tuple{Symbol}, NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt64}}}}, typeof(CHOPOFF.guide_to_template_format)}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Array{UInt8, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Array{UInt8, 2}})
precompile(Tuple{typeof(Base.eachrow), Array{UInt8, 2}})
precompile(Tuple{typeof(Base.map), Function, Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#162#164", Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, Base.Generator{Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, CHOPOFF.var"#162#164"}})
precompile(Tuple{typeof(CHOPOFF.duplicated), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Int64}}, typeof(Base.mapreduce), Function, Function, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), CHOPOFF.var"#163#165"{CHOPOFF.HashDB{UInt8, UInt16}, Bool}, typeof(Base.:(+)), Int64, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.ordering), DataFrames.DataFrame, Array{Symbol, 1}, Function, Function, Bool, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{DataFrames.var"#152#153"{Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{DataFrames.var"#152#153"{Array{Int64, 1}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(DataFrames.normalize_selection), DataFrames.Index, Symbol, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(DataFrames._add_col_check_copy), DataFrames.DataFrame, DataFrames.DataFrame, Int64, Bool, Base.RefValue{Any}, Symbol, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{Type{NamedTuple{(:transcode,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(CSV.write), String, DataFrames.DataFrame})
precompile(Tuple{Tables.var"#11#13"{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:append, :compress, :header), Tuple{Bool, Bool, Bool}}, typeof(CSV.write), Tables.Schema{(:guide, :D0, :D1), Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, String, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{CSV.var"#107#108"{Bool, Bool, Tables.Schema{(:guide, :D0, :D1), Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}, DataFrames.DataFrameRows{DataFrames.DataFrame}, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, Array{UInt8, 1}, Int64, Int64, Tuple{Symbol, Symbol, Symbol}}, Base.IOStream})
precompile(Tuple{typeof(CSV.writenames), Array{UInt8, 1}, Int64, Int64, Base.IOStream, Tuple{Symbol, Symbol, Symbol}, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Symbol})
precompile(Tuple{CSV.var"#114#115"{Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.IOStream, Int64, CSV.Options{UInt8, UInt8, Nothing, Tuple{}, typeof(CSV._identity)}, UInt8, UInt8}, Int64, Int64, Symbol})
precompile(Tuple{Type{CSV.File}, String})
precompile(Tuple{typeof(CSV.getbytebuffer), String, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, CSV.var"#10#13"{Bool}}})
precompile(Tuple{typeof(CSV.getname), String})
precompile(Tuple{typeof(CSV.parsefilechunk!), CSV.Context, Int64, Int64, Int64, Int64, Array{CSV.Column, 1}, Type{Tuple{}}})
precompile(Tuple{Type{InlineStrings.String31}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String31, 1, S, V, A} where A<:AbstractArray{InlineStrings.String31, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base._getindex_ra), Base.ReinterpretArray{InlineStrings.String31, 1, UInt8, Array{UInt8, 1}, false}, Int64, Tuple{}})
precompile(Tuple{Type{SentinelArrays.SentinelArray{T, N, S, V, A} where A<:AbstractArray{T, N} where V where S where N where T}, Array{InlineStrings.String31, 1}, InlineStrings.String31, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}, InlineStrings.String31, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String31}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{InlineStrings.String31, 1, InlineStrings.String31, Base.Missing, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}})
precompile(Tuple{Type{DataFrames.DataFrame}, CSV.File})
precompile(Tuple{typeof(Base.length), Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{InlineStrings.String31, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{InlineStrings.String31, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{String}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), Array{InlineStrings.String31, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{InlineStrings.String31, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}}}})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{Type{Test.Returned}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:init,), Tuple{Core.TypeofBottom}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{DataFrames.var"#126#127", Base.BottomRF{typeof(Base.promote_type)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base.promote_type)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{DataFrames.var"#126#127", Base.BottomRF{typeof(Base.promote_type)}}, Type{AbstractArray{T, 1} where T}})
precompile(Tuple{Type{Array{T, 2} where T}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{DataFrames.var"#126#127", Base.BottomRF{typeof(Base.promote_type)}}, Type, DataFrames.DataFrameColumns{DataFrames.DataFrame}})
precompile(Tuple{Base.MappingRF{DataFrames.var"#126#127", Base.BottomRF{typeof(Base.promote_type)}}, Type, Array{Int64, 1}})
precompile(Tuple{Type{Array{Int64, 2}}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 2}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.all), Bool})
precompile(Tuple{Type{NamedTuple{(:distance, :ambig_max), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:variant_overlaps,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:distance,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:view,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:keep,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{Signed}, UInt64})
precompile(Tuple{Type{NamedTuple{(:precision,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{Type{NamedTuple{(:inspect_prefix,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{String, 1}, Array{String, 1}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:withPAM,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:less_or_equal,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:outer,), T} where T<:Tuple}, Tuple{Tuple{Int64}}})
precompile(Tuple{typeof(Base.any), Function, Tuple{Int64}})
precompile(Tuple{typeof(VariantCallFormat._readheader!), VariantCallFormat.Reader, VariantCallFormat.ReaderHelper.State{BufferedStreams.BufferedInputStream{Base.IOStream}}})
precompile(Tuple{typeof(VariantCallFormat._read!), VariantCallFormat.Reader, VariantCallFormat.ReaderHelper.State{BufferedStreams.BufferedInputStream{Base.IOStream}}, VariantCallFormat.Record})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Array{Base.UnitRange{Int64}, 1}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Array{Base.UnitRange{Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Base.UnitRange{Int64}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.close), BufferedStreams.BufferedInputStream{Base.IOStream}})
precompile(Tuple{typeof(Base.intersect), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{ThreadsX.Implementations.var"##mapreduce#11", Base.Pairs{Symbol, Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}}}}, typeof(ThreadsX.mapreduce), Function, Function, Base.Iterators.Zip{Tuple{Array{Base.UnitRange{Int64}, 1}, Array{String, 1}, Array{String, 1}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#186#193"{Int64, CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, UInt8}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init, :basesize), Tuple{Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, Int64}}, typeof(Transducers.foldxt), typeof(Base.vcat), Transducers.Map{CHOPOFF.var"#186#193"{Int64, CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, UInt8}}, Base.Iterators.Zip{Tuple{Array{Base.UnitRange{Int64}, 1}, Array{String, 1}, Array{String, 1}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}}}})
precompile(Tuple{typeof(CHOPOFF.find_ots_one), Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}, String, String, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, UInt8, CHOPOFF.DBInfo})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{CHOPOFF.var"#186#193"{Int64, CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, UInt8}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.Iterators.Zip{Tuple{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.SubArray{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Int64}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#59#61"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#59#61"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(CHOPOFF.removepam), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#59#61"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#59#61"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#59#61"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#60#62"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#60#62"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#60#62"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(|)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.in), Tuple{Int64, Array{Base.UnitRange{Int64}, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.in), Tuple{Int64, Array{Base.UnitRange{Int64}, 1}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(|)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.in), Tuple{Int64, Array{Base.UnitRange{Int64}, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.in), Tuple{Int64, Array{Base.UnitRange{Int64}, 1}}}}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{Int64}, 1}, Base.BitArray{1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#171#175"{Int64}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Base.UnitRange{Int64}, 1}, CHOPOFF.var"#171#175"{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#172#176"{Int64}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Base.UnitRange{Int64}, 1}, CHOPOFF.var"#172#176"{Int64}}})
precompile(Tuple{typeof(Base.repeat), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.trues), Int64})
precompile(Tuple{typeof(Base.repeat), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{Int64, 1}, Base.BitArray{1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, NTuple{5, Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, NTuple{5, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{Int64, 1}, Base.BitArray{1}, Array{String, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#173#177", Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{Int64, 1}, Base.BitArray{1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{Int64, 1}, Base.BitArray{1}, Array{String, 1}}}, CHOPOFF.var"#173#177"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#174#178", Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{Int64, 1}, Base.BitArray{1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{Int64, 1}, Base.BitArray{1}, Array{String, 1}}}, CHOPOFF.var"#174#178"}})
precompile(Tuple{typeof(Base.vcat), Array{CHOPOFF.VarOT{UInt8, String}, 1}, Array{CHOPOFF.VarOT{UInt8, String}, 1}})
precompile(Tuple{typeof(Base.append!), Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, Array{CHOPOFF.VarOT{UInt8, String}, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#186#193"{Int64, CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, UInt8}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#186#193"{Int64, CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, UInt8}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}})
precompile(Tuple{typeof(Base.append!), Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}})
precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}}}, typeof(ThreadsX.mapreduce), Function, Function, Array{Int64, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#187#194"{Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{Base.UnitRange{Int64}, 1}, Array{String, 1}, Array{String, 1}, CHOPOFF.DBInfo, Array{Int64, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, UInt8}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init, :basesize), Tuple{Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, Int64}}, typeof(Transducers.foldxt), typeof(Base.vcat), Transducers.Map{CHOPOFF.var"#187#194"{Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{Base.UnitRange{Int64}, 1}, Array{String, 1}, Array{String, 1}, CHOPOFF.DBInfo, Array{Int64, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, UInt8}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.Sort.searchsortedlast), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Base.Iterators.var"#10#11"{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Base.Iterators.ProductIterator{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#179#182"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}}, Base.Iterators.ProductIterator{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, CHOPOFF.var"#179#182"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.vec), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.string), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.:(*)), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#60#62"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#60#62"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#187#194"{Int64, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{Base.UnitRange{Int64}, 1}, Array{String, 1}, Array{String, 1}, CHOPOFF.DBInfo, Array{Int64, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, UInt8}}, Transducers.BottomRF{Transducers.Completing{typeof(Base.vcat)}}}, Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt8, 1}, UInt8, Base.Generator{Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, CHOPOFF.var"#189#196"}, Int64})
precompile(Tuple{CHOPOFF.var"#190#197"{CHOPOFF.DBInfo}, CHOPOFF.VarOT{UInt8, String}})
precompile(Tuple{Type{Array{UInt32, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt32, 1}, UInt32, Base.Generator{Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, CHOPOFF.var"#190#197"{CHOPOFF.DBInfo}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{CHOPOFF.VarOT{C, A} where A<:AbstractString where C<:Unsigned, 1}, CHOPOFF.var"#192#199"}, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 2}, Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.refpool_and_array), NTuple{16, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{16, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{16, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.first), NTuple{16, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{NTuple{16, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), NTuple{16, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{NTuple{16, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.any), Function, NTuple{16, DataFrames.IntegerRefpool{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{16, DataFrames.IntegerRefpool{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, NTuple{16, DataFrames.IntegerRefarray{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{16, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{16, Array{UInt8, 1}}, NTuple{16, DataFrames.IntegerRefpool{Int64}}, NTuple{16, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{16, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, NTuple{16, DataFrames.IntegerRefpool{Int64}}, NTuple{16, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{DataFrames.var"#476#478"{Base.UnitRange{Int64}, Array{UInt64, 1}, Array{Bool, 1}, DataFrames.IntegerRefarray{Array{UInt8, 1}}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(<=)), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{UInt8, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(&)), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.BitArray{1}, Base.BitArray{1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.length), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.getproperty), Base.MappingRF{Base.var"#316#317"{typeof(Base.identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.BottomRF{typeof(Base._rf_findmax)}, Symbol})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{Base.var"#316#317"{typeof(Base.identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, Type{Pair{Int64, Int64}}})
precompile(Tuple{typeof(Base.argmax), Array{Int64, 1}})
precompile(Tuple{typeof(InlineStrings.inlinestrings), Array{String, 1}})
precompile(Tuple{Type{InlineStrings.String15}, String})
precompile(Tuple{typeof(InlineStrings.allocate), Type{InlineStrings.String15}, Base.HasShape{1}, Array{String, 1}})
precompile(Tuple{typeof(InlineStrings.set!), Base.HasShape{1}, Array{InlineStrings.String15, 1}, InlineStrings.String15, Int64})
precompile(Tuple{typeof(InlineStrings._inlinestrings), Array{String, 1}, Int64, Type{InlineStrings.String15}, Base.HasShape{1}, Array{InlineStrings.String15, 1}, Int64})
precompile(Tuple{Type{CHOPOFF.SymbolicAlignments}, CHOPOFF.DBInfo, Array{UInt8, 2}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(CHOPOFF.build_ambigPrefixHashDB), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{UInt32, 1}, Array{Bool, 1}, Int64, Int64, Type, Type, Type, Array{InlineStrings.String15, 1}, CHOPOFF.SymbolicAlignments})
precompile(Tuple{Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.getproperty), Base.Iterators.ProductIterator{Tuple{}}, Symbol})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.append!), Array{UInt64, 1}, UInt64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>>)), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>>)), Tuple{Array{UInt64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>>)), Tuple{Array{UInt64, 1}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>>)), Tuple{Array{UInt64, 1}, Int64}}}}})
precompile(Tuple{typeof(Base.unique), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.append!), Array{UInt64, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.length), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.Iterators._piterate), Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#18#19", Tuple{Tuple{BioSymbols.DNA, Int64}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}, Tuple{Tuple{BioSymbols.DNA, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(&)), UInt64, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{UInt64, Array{UInt64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt16}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt16}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{UInt64, Array{UInt64, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt16}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{UInt64, Array{UInt64, 1}}}}}})
precompile(Tuple{typeof(Base.sortperm), Array{UInt64, 1}})
precompile(Tuple{Type{CHOPOFF.AmbigPrefixHashDB}, CHOPOFF.SymbolicAlignments, Array{UInt64, 1}, Array{Int64, 1}, Array{UInt16, 1}, Array{UInt8, 1}, Array{UInt32, 1}, Base.BitArray{1}, Array{InlineStrings.String15, 1}, Base.BitArray{1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Int64, 2}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Int64, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{UInt32, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Bool, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Tuple{Int64}})
precompile(Tuple{Type{Array{Int64, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Int64, 2}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Int64, 1}})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Bool, 1}, Bool, Int64})
precompile(Tuple{Type{Array{InlineStrings.String15, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.AmbigPrefixHashDB, Symbol})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.SymbolicAlignments, Symbol})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.DBInfo, Symbol})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.Motif, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(<=)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 2}, Base.BitArray{1}, Function})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#201#203"{Int64, Array{Int64, 1}, String, Array{Int64, 2}, Int64, DataType, Int64, CHOPOFF.AmbigPrefixHashDB}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Base.var"##s997#614", Vararg{Any, 4}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CHOPOFF.var"#201#203"{Int64, Array{Int64, 1}, String, Array{Int64, 2}, Int64, DataType, Int64, CHOPOFF.AmbigPrefixHashDB}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt64}}}, typeof(CHOPOFF.guide_to_template_format), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CHOPOFF.asUInt), Type{UInt64}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base._similar_for), Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, Type{UInt64}, Base.Generator{Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, CHOPOFF.var"#202#204"{CHOPOFF.AmbigPrefixHashDB}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt64, 1}, UInt64, Base.Generator{Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, CHOPOFF.var"#202#204"{CHOPOFF.AmbigPrefixHashDB}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.unique), Array{UInt64, 1}})
precompile(Tuple{typeof(CHOPOFF.potential_ots_idx), Array{UInt64, 1}, Array{UInt64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.collect), Tuple{Array{Base.UnitRange{Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.collect), Tuple{Array{Base.UnitRange{Int64}, 1}}}})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}})
precompile(Tuple{typeof(CHOPOFF.duplicated), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt16, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Array{UInt64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(<<)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt64, 1}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Array{UInt16, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt16, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(|)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt64, 1}}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt16, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(|)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt64, 1}}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt16, 1}}}}}, Int64})
precompile(Tuple{typeof(BioSequences.nextposition), BioSequences.BitIndex{4, UInt64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(|)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<<)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt64, 1}}}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt64}}, Array{UInt16, 1}}}}}, Int64}}})
precompile(Tuple{typeof(Base.to_indices), Base.BitArray{1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, Base.BitArray{1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.sum), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.reinterpret), Type, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{BioSymbols.DNA}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.reinterpret), Tuple{Base.RefValue{Type{BioSymbols.DNA}}, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.reinterpret), Tuple{Base.RefValue{Type{BioSymbols.DNA}}, Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.setindex!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Array{BioSymbols.DNA, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(CHOPOFF.align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, typeof(BioSymbols.iscompatible)})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, UInt8})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(Base.string), UInt32})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String15, 1}, Int64})
precompile(Tuple{typeof(Base.string), InlineStrings.String15})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String, Vararg{Union{AbstractChar, AbstractString}}})
precompile(Tuple{typeof(Base.string), String, String, String, String, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, InlineStrings.String15})
precompile(Tuple{typeof(Base.write), Base.IOStream, String})
precompile(Tuple{typeof(Base.filter), CHOPOFF.var"#24#28"{String}, Array{String, 1}})
precompile(Tuple{Base.var"##open#424", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), CHOPOFF.var"#26#30"{Base.IOStream}, String, Vararg{String}})
precompile(Tuple{Type{InlineStrings.String15}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String15, 1, S, V, A} where A<:AbstractArray{InlineStrings.String15, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base._getindex_ra), Base.ReinterpretArray{InlineStrings.String15, 1, UInt8, Array{UInt8, 1}, false}, Int64, Tuple{}})
precompile(Tuple{Type{SentinelArrays.SentinelArray{T, N, S, V, A} where A<:AbstractArray{T, N} where V where S where N where T}, Array{InlineStrings.String15, 1}, InlineStrings.String15, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}, InlineStrings.String15, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}})
precompile(Tuple{Type{InlineStrings.String1}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String1, 1, S, V, A} where A<:AbstractArray{InlineStrings.String1, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base._getindex_ra), Base.ReinterpretArray{InlineStrings.String1, 1, UInt8, Array{UInt8, 1}, false}, Int64, Tuple{}})
precompile(Tuple{Type{SentinelArrays.SentinelArray{T, N, S, V, A} where A<:AbstractArray{T, N} where V where S where N where T}, Array{InlineStrings.String1, 1}, InlineStrings.String1, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String1, 1, InlineStrings.String1, Base.Missing, Array{InlineStrings.String1, 1}}, InlineStrings.String1, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String1, 1, InlineStrings.String1, Base.Missing, Array{InlineStrings.String1, 1}}})
precompile(Tuple{Type{InlineStrings.String7}, WeakRefStrings.PosLenString})
precompile(Tuple{Type{SentinelArrays.SentinelArray{InlineStrings.String7, 1, S, V, A} where A<:AbstractArray{InlineStrings.String7, 1} where V where S}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, SentinelArrays.SentinelArray{InlineStrings.String7, 1, InlineStrings.String7, Base.Missing, Array{InlineStrings.String7, 1}}})
precompile(Tuple{typeof(Base.convert), Type{SentinelArrays.SentinelArray{InlineStrings.String15, 1, S, V, A} where A<:AbstractArray{InlineStrings.String15, 1} where V where S}, SentinelArrays.SentinelArray{InlineStrings.String7, 1, InlineStrings.String7, Base.Missing, Array{InlineStrings.String7, 1}}})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}, InlineStrings.String7, Int64})
precompile(Tuple{typeof(Base.setindex!), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}, Int64})
precompile(Tuple{typeof(Base.resize!), SentinelArrays.SentinelArray{InlineStrings.String1, 1, InlineStrings.String1, Base.Missing, Array{InlineStrings.String1, 1}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String15}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String1}, Nothing, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{InlineStrings.String15, 1, InlineStrings.String15, Base.Missing, Array{InlineStrings.String15, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.length), Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{InlineStrings.String15, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{InlineStrings.String15, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.firstindex), Array{InlineStrings.String15, 1}})
precompile(Tuple{typeof(DataFrames.row_group_slots!), Tuple{Array{InlineStrings.String31, 1}}, Base.Val{false}, Array{Int64, 1}, Bool, Nothing, Bool})
precompile(Tuple{Type{Pair{A, B} where B where A}, Function, Type})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{CHOPOFF.var"#18#20"{Int64}, DataType}})
precompile(Tuple{typeof(DataFrames.normalize_selection), DataFrames.Index, Pair{var"#s472", var"#s89"} where var"#s89"<:(Pair{var"#s76", var"#s75"} where var"#s75"<:Union{AbstractArray{Symbol, 1}, AbstractString, DataType, Function, Symbol, AbstractArray{var"#s57", 1} where var"#s57"<:AbstractString} where var"#s76"<:Union{Function, Type}) where var"#s472", Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, Pair{CHOPOFF.var"#18#20"{Int64}, DataType}})
precompile(Tuple{DataFrames.var"#779#788"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Pair{Int64, Pair{CHOPOFF.var"#18#20"{Int64}, DataType}}})
precompile(Tuple{DataFrames.var"#780#789"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Pair{Int64, Pair{CHOPOFF.var"#18#20"{Int64}, DataType}}})
precompile(Tuple{DataFrames.var"#781#790"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Bool, Bool, DataFrames.DataFrame, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}, Base.RefValue{Array{Int64, 1}}, Bool, Pair{Int64, Pair{CHOPOFF.var"#18#20"{Int64}, DataType}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{CHOPOFF.var"#18#20"{Int64}, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{CHOPOFF.var"#18#20"{Int64}, DataType}, Int64, Int64})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:alg,), Tuple{Base.Sort.MissingOptimization{Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{Base.Sort.IsUIntMappable{Base.Sort.Small{40, Base.Sort.InsertionSortAlg, Base.Sort.CheckSorted{Base.Sort.ComputeExtrema{Base.Sort.ConsiderCountingSort{Base.Sort.CountingSort, Base.Sort.ConsiderRadixSort{Base.Sort.RadixSort, Base.Sort.Small{80, Base.Sort.InsertionSortAlg, Base.Sort.ScratchQuickSort{Base.Missing, Base.Missing, Base.Sort.InsertionSortAlg}}}}}}}, Base.Sort.StableCheckSorted{Base.Sort.ScratchQuickSort{Base.Missing, Base.Missing, Base.Sort.InsertionSortAlg}}}}}}}}}, Tuple{Symbol}})
precompile(Tuple{Type{NamedTuple{(:alg,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(DataFrames.do_call), CHOPOFF.var"#18#20"{Int64}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(DataFrames._combine_process_pair_astable), Bool, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}, Base.RefValue{Array{Int64, 1}}, Type{DataFrames.AsTable}, Bool, Base.RefValue{Any}, Base.RefValue{Any}, Base.RefValue{Any}, Bool})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:D0, :D1, :D2), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), Function, NamedTuple{(:D0, :D1, :D2), Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.any), Function, NamedTuple{(:D0, :D1, :D2), Tuple{DataType, DataType, DataType}}})
precompile(Tuple{typeof(Base._any), DataFrames.var"#836#840", NamedTuple{(:D0, :D1, :D2), Tuple{DataType, DataType, DataType}}, Base.Colon})
precompile(Tuple{typeof(Base.ntuple), DataFrames.var"#837#841"{NamedTuple{(:D0, :D1, :D2), Tuple{DataType, DataType, DataType}}, Int64}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:D0, :D1, :D2), Tuple{Int64, Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.isthreadsafe), Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{Type{Ref{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{DataFrames.var"#848#851"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Tuple{Symbol, Symbol, Symbol}, Tuple{Array{Int64, 1}}, CHOPOFF.var"#18#20"{Int64}, Array{Bool, 1}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}, Base.ReentrantLock, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_rows_with_first_task!), Int64, Int64, Int64, Int64, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}, Array{Bool, 1}, Base.ReentrantLock, CHOPOFF.var"#18#20"{Int64}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Tuple{Symbol, Symbol, Symbol}, DataFrames.FirstMultiCol})
precompile(Tuple{typeof(DataFrames.wrap_row), NamedTuple{(:D0, :D1, :D2), Tuple{Int64, Int64, Int64}}, DataFrames.FirstMultiCol})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{DataFrames.var"#773#776"{Bool, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Tuple{Bool, Int64}}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String31, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__inbounds_setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{InlineStrings.String31, 1}, Int64})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{InlineStrings.String31, 1}}}})
precompile(Tuple{DataFrames.var"#152#153"{Array{Int64, 1}}, Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{InlineStrings.String31, 1}}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.any), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#678#679", Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(DataAPI.refarray), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Nothing, Nothing})
precompile(Tuple{typeof(Base.Iterators.zip), Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames.prepare_on_col), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.issorted), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(DataFrames._innerjoin_unsorted), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, typeof(DataFrames.manipulate), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{Type{Array{AbstractArray{T, 1} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Int64})
precompile(Tuple{typeof(DataFrames.similar_outer), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.view), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.view), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64, Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(DataFrames._propagate_join_metadata!), DataFrames.DataFrameJoiner, DataFrames.DataFrame, DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Symbol})
precompile(Tuple{typeof(Base.copy), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.nonmissingtype_checked), Type})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#109#111"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CHOPOFF.DBInfo}, typeof(Base.union), Base.IndexLinear, Array{String, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#71#74"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#71#74"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#71#74"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#71#74"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#71#74"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.convert), Type, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned}, UInt8, Array{UInt32, 1}, Bool})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned}, Tuple{UInt8, Array{UInt32, 1}, Bool}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#72#75"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CHOPOFF.Loc{UInt8, UInt32}, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#72#75"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CHOPOFF.Loc{UInt8, UInt32}, 1}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#72#75"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CHOPOFF.Loc{UInt8, UInt32}, 1}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#72#75"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CHOPOFF.Loc{UInt8, UInt32}, 1}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{CHOPOFF.PrefixDB, 1}, Array{CHOPOFF.PrefixDB, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#72#75"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{CHOPOFF.Loc{UInt8, UInt32}, 1}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{CHOPOFF.PrefixDB, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CHOPOFF.PrefixDB, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CHOPOFF.PrefixDB, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{CHOPOFF.PrefixDB, 1}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#77#82", Array{CHOPOFF.PrefixDB, 1}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#77#82"}}}, Symbol})
precompile(Tuple{typeof(Base.:(∘)), Transducers.Enumerate{Int64}, Transducers.Map{CHOPOFF.var"#77#82"}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{CHOPOFF.var"#77#82"}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#77#82"}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#77#82"}}}}, Int64, Int64})
precompile(Tuple{typeof(ThreadsX.collect), Base.Generator{Array{CHOPOFF.PrefixDB, 1}, CHOPOFF.var"#77#82"}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#77#82"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{CHOPOFF.PrefixDB, 1, Array{CHOPOFF.PrefixDB, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{CHOPOFF.PrefixDB, 1, Array{CHOPOFF.PrefixDB, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#77#82"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#77#82"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{CHOPOFF.PrefixDB, 1}, CHOPOFF.var"#77#82"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#78#83", Array{CHOPOFF.PrefixDB, 1}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#78#83"}}}, Symbol})
precompile(Tuple{typeof(Base.:(∘)), Transducers.Enumerate{Int64}, Transducers.Map{CHOPOFF.var"#78#83"}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{CHOPOFF.var"#78#83"}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#78#83"}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#78#83"}}}}, Int64, Int64})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(ThreadsX.collect), Base.Generator{Array{CHOPOFF.PrefixDB, 1}, CHOPOFF.var"#78#83"}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#78#83"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{CHOPOFF.PrefixDB, 1, Array{CHOPOFF.PrefixDB, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{CHOPOFF.PrefixDB, 1, Array{CHOPOFF.PrefixDB, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#78#83"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#78#83"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{CHOPOFF.PrefixDB, 1}, CHOPOFF.var"#78#83"}})
precompile(Tuple{typeof(Base.vcat), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.unique), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#79#84"{String, String}})
precompile(Tuple{typeof(Base.convert), Core.TypeofBottom, Nothing})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#79#84"{String, String}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#79#84"{String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.findfirst), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.findnext), CHOPOFF.var"#80#85"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.findnext), CHOPOFF.var"#81#86"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{CHOPOFF.PrefixDB, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.PrefixDB, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UnionAll})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, UInt8})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#79#84"{String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#79#84"{String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Nothing, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Nothing, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Nothing, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.union), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#110#112"{String, CHOPOFF.DBInfo}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#110#112"{String, CHOPOFF.DBInfo}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#110#112"{String, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{UnionAll}})
precompile(Tuple{Type{Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, CHOPOFF.Loc{UInt8, UInt32}, Int64})
precompile(Tuple{typeof(Base.append!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.append!), Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{Base.UnitRange{UInt32}, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#110#112"{String, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#110#112"{String, CHOPOFF.DBInfo}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Nothing}}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.LinearDB, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.first), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.reverse), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.reverse), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#118#119"{Int64, String, String, CHOPOFF.LinearDB}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#118#119"{Int64, String, String, CHOPOFF.LinearDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#118#119"{Int64, String, String, CHOPOFF.LinearDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#113#115"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CHOPOFF.var"#113#115"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), Function, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#114#116", Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CHOPOFF.var"#114#116"}})
precompile(Tuple{typeof(Base.all), Array{Bool, 1}})
precompile(Tuple{Type{Array{Base.UnitRange{UInt32}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{Base.UnitRange{UInt32}, 1}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.SuffixDB, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Int64})
precompile(Tuple{typeof(CHOPOFF.suffix_align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{UInt32}, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.UnitRange{UInt32}, Symbol})
precompile(Tuple{Base.Colon, UInt32, UInt32})
precompile(Tuple{typeof(Base.getindex), Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Base.UnitRange{UInt32}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Symbol})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String, String, String, Vararg{String}})
precompile(Tuple{typeof(Base.iterate), Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(CHOPOFF.decode), CHOPOFF.Loc{UInt8, UInt32}, CHOPOFF.DBInfo})
precompile(Tuple{typeof(Base.iterate), Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#118#119"{Int64, String, String, CHOPOFF.LinearDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#118#119"{Int64, String, String, CHOPOFF.LinearDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames.row_group_slots!), Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Nothing, Bool})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:D0, :D1, :D2, :D3), NTuple{4, Int64}}})
precompile(Tuple{typeof(Base.map), Function, NamedTuple{(:D0, :D1, :D2, :D3), NTuple{4, Int64}}})
precompile(Tuple{typeof(Base.any), Function, NamedTuple{(:D0, :D1, :D2, :D3), NTuple{4, DataType}}})
precompile(Tuple{typeof(Base._any), DataFrames.var"#836#840", NamedTuple{(:D0, :D1, :D2, :D3), NTuple{4, DataType}}, Base.Colon})
precompile(Tuple{typeof(Base.ntuple), DataFrames.var"#837#841"{NamedTuple{(:D0, :D1, :D2, :D3), NTuple{4, DataType}}, Int64}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:D0, :D1, :D2, :D3), NTuple{4, Int64}}, NTuple{4, Array{Int64, 1}}, Int64, Int64, NTuple{4, Symbol}})
precompile(Tuple{typeof(DataFrames.isthreadsafe), NTuple{4, Array{Int64, 1}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{Type{Ref{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}}, NTuple{4, Array{Int64, 1}}})
precompile(Tuple{DataFrames.var"#848#851"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, NTuple{4, Symbol}, Tuple{Array{Int64, 1}}, CHOPOFF.var"#18#20"{Int64}, Array{Bool, 1}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}, Base.ReentrantLock, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_rows_with_first_task!), Int64, Int64, Int64, Int64, NTuple{4, Array{Int64, 1}}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}, Array{Bool, 1}, Base.ReentrantLock, CHOPOFF.var"#18#20"{Int64}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, NTuple{4, Symbol}, DataFrames.FirstMultiCol})
precompile(Tuple{typeof(DataFrames.wrap_row), NamedTuple{(:D0, :D1, :D2, :D3), NTuple{4, Int64}}, DataFrames.FirstMultiCol})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__inbounds_setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}}}})
precompile(Tuple{DataFrames.var"#152#153"{Array{Int64, 1}}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt32}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Base.UnitRange{UInt32}, 1}}}, Int64}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{UInt64, 1}, Array{UInt32, 1}})
precompile(Tuple{Type{Base.IdDict{UInt64, UInt32}}, Base.Iterators.Zip{Tuple{Array{UInt64, 1}, Array{UInt32, 1}}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, NTuple{4, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{NTuple{4, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.Iterators.ProductIterator{NTuple{4, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{NTuple{4, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), NTuple{4, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{NTuple{4, Array{Int64, 1}}}, NTuple{4, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.refpool_and_array), NTuple{22, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{22, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{22, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.first), NTuple{22, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{NTuple{22, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), NTuple{22, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{NTuple{22, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.any), Function, NTuple{22, DataFrames.IntegerRefpool{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{22, DataFrames.IntegerRefpool{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, NTuple{22, DataFrames.IntegerRefarray{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{22, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{22, Array{UInt8, 1}}, NTuple{22, DataFrames.IntegerRefpool{Int64}}, NTuple{22, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{22, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, NTuple{22, DataFrames.IntegerRefpool{Int64}}, NTuple{22, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.vcat), Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#167#169", Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, Base.Generator{Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, CHOPOFF.var"#167#169"}})
precompile(Tuple{typeof(Base.mapfoldl_impl), CHOPOFF.var"#168#170"{CHOPOFF.DictDB}, typeof(Base.:(+)), Int64, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.:(+)), Int64, UInt32})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CSV.var"#28#31"{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CSV.var"#28#31"{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.UnitRange{Int64}, CSV.var"#28#31"{Int64}}, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{Int64, 1}})
precompile(Tuple{typeof(CSV.findrowstarts!), Array{UInt8, 1}, Parsers.Options, Array{Int64, 1}, Int64, Array{CSV.Column, 1}, Any, Base.IdDict{Type, Type}, Bool, Int64})
precompile(Tuple{CSV.var"#16#18"{Array{UInt8, 1}, Parsers.Options, Array{Int64, 1}, Int64, Int64}})
precompile(Tuple{CSV.var"#17#19"{Array{UInt8, 1}, Parsers.Options, Array{Int64, 1}, Int64, Array{CSV.Column, 1}, DataType, Base.IdDict{Type, Type}, Bool, Int64, Array{Int64, 1}, Array{Type, 1}, Base.ReentrantLock, Base.Threads.Atomic{Bool}, Base.Threads.Atomic{Int64}, Base.Threads.Atomic{Int64}, Int64}})
precompile(Tuple{typeof(CSV.promote_types), Any, Any})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{CSV.var"#34#39"{CSV.Context, Array{Array{CSV.Column, 1}, 1}, Int64, Int64, Array{Int64, 1}, Base.ReentrantLock}})
precompile(Tuple{typeof(CSV.isinttype), Type})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:force,), Tuple{Bool}}})
precompile(Tuple{typeof(Core.Compiler.apply_type_tfunc), Core.Compiler.InferenceLattice{Core.Compiler.PartialsLattice{Core.Compiler.ConstsLattice}}, Any, Any, Vararg{Any}})
precompile(Tuple{CSV.var"#35#40"{CSV.Context, Int64, Array{Array{CSV.Column, 1}, 1}, Array{Int64, 1}, Int64, Int64, CSV.Column}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CSV.var"#49#50"{Array{Array{CSV.Column, 1}, 1}, Int64}}})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String3}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String31}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base.length), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CSV.var"#49#50"{Array{Array{CSV.Column, 1}, 1}, Int64}}, Int64})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String15}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(CSV.makechain!), Type{InlineStrings.String31}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:force,), Tuple{Bool}}, typeof(SentinelArrays.newsentinel!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Vararg{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.checkpooled!), Type{InlineStrings.String1}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64, Int64, CSV.Context})
precompile(Tuple{typeof(Base._array_for), Type{Array{InlineStrings.String31, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{SentinelArrays.var"##newsentinel!#4", Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:force,), Tuple{Bool}}}, typeof(SentinelArrays.newsentinel!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Vararg{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{InlineStrings.String31, 1}, 1}, Array{InlineStrings.String31, 1}, Base.Generator{Base.UnitRange{Int64}, CSV.var"#54#58"{Array{Array{CSV.Column, 1}, 1}, Int64}}, Int64})
precompile(Tuple{Type{SentinelArrays.ChainedVector{T, A} where A<:AbstractArray{T, 1} where T}, Array{Array{InlineStrings.String31, 1}, 1}})
precompile(Tuple{typeof(Base.cconvert), Type, NTuple{8, VecElement{UInt64}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{NTuple{8, VecElement{UInt64}}}, NTuple{8, VecElement{UInt64}}})
precompile(Tuple{typeof(SentinelArrays._newsentinel), Type})
precompile(Tuple{typeof(Base.length), SentinelArrays.ChainedVector{InlineStrings.String31, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:newsent, :force), Tuple{Int64, Bool}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:newsent, :force), Tuple{Int64, Bool}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:newsent, :force), Tuple{Int64, Bool}}, typeof(SentinelArrays._newsentinel!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Vararg{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{SentinelArrays.var"##_newsentinel!#1", Int64, Bool, typeof(SentinelArrays._newsentinel!), SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}, Vararg{SentinelArrays.SentinelArray{Int64, 1, Int64, Base.Missing, Array{Int64, 1}}}})
precompile(Tuple{typeof(CSV.makechain!), Type{Int64}, Array{Array{CSV.Column, 1}, 1}, CSV.Column, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 1}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, CSV.var"#54#58"{Array{Array{CSV.Column, 1}, 1}, Int64}}, Int64})
precompile(Tuple{Type{SentinelArrays.ChainedVector{T, A} where A<:AbstractArray{T, 1} where T}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.length), SentinelArrays.ChainedVector{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames._preprocess_column), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(DataFrames._preprocess_column), SentinelArrays.ChainedVector{InlineStrings.String31, Array{InlineStrings.String31, 1}}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), SentinelArrays.ChainedVector{Int64, Array{Int64, 1}}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.BitArray{1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{String}, Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Main.asguide), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{InlineStrings.String31, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.asguide), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{InlineStrings.String31, 1}}}}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.length), Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{InlineStrings.String31, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Main.countspaces), Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Main.countspaces), Tuple{Array{InlineStrings.String31, 1}}}})
precompile(Tuple{typeof(Main.ldb_start), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), Array{String, 1}, String})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{String, 1}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.firstindex), Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, String})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, InlineStrings.String1})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(&)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(&)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, InlineStrings.String15})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(&)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(&)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(&)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String15}}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.RefValue{InlineStrings.String1}}}}}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String31, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String31, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String3, UInt32, 1, Array{UInt32, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#136#137"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CHOPOFF.DBInfo}, typeof(Base.union), Base.IndexLinear, Array{String, 1}})
precompile(Tuple{PooledArrays.var"#1#2", PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.zeros), Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.ones), Type{UInt32}, Int64})
precompile(Tuple{typeof(ThreadsX.findall), Function, Array{UInt32, 1}})
precompile(Tuple{ThreadsX.Implementations.var"##findall#42", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.findall), Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.NoopDACContext, Transducers.SizedReducible{Base.SubArray{Int64, 1, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{Int64, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#132#134"{Array{UInt32, 1}, Int64, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#132#134"{Array{UInt32, 1}, Int64, Int64}}, Array{Int64, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#132#134"{Array{UInt32, 1}, Int64, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, UInt32})
precompile(Tuple{typeof(CHOPOFF.levenshtein), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#132#134"{Array{UInt32, 1}, Int64, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#132#134"{Array{UInt32, 1}, Int64, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Int64, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Int64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.pop!), Array{Int64, 1}})
precompile(Tuple{typeof(Base.maybeview), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{UInt32, 1, Array{UInt32, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#132#134"{Array{UInt32, 1}, Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CHOPOFF.var"#132#134"{Array{UInt32, 1}, Int64, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{UInt32}, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(ThreadsX.map), Function, Base.UnitRange{Int64}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#133#135"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#133#135"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}, Base.UnitRange{Int64}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#133#135"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#133#135"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{CHOPOFF.Node, 1}, Array{CHOPOFF.Node, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#133#135"{Array{UInt8, 1}, Array{UInt32, 1}, Array{UInt32, 1}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{CHOPOFF.Node, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CHOPOFF.Node, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CHOPOFF.Node, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.reshape), Array{CHOPOFF.Node, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{CHOPOFF.Node, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.UseSIMD{false}, Transducers.Reduction{Transducers.Filter{ThreadsX.Implementations.var"#43#44"{Base.Fix2{typeof(Base.isequal), Int64}, Array{UInt32, 1}}}, Transducers.Reduction{Transducers.Map{Type{BangBang.NoBang.SingletonVector{T} where T}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}}, Array{Int64, 1}, BangBang.NoBang.Empty{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.TreeDB, Symbol})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{String}})
precompile(Tuple{typeof(Base.println), CHOPOFF.DBInfo})
precompile(Tuple{typeof(Base.getindex), Pair{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.println), Base.TTY, CHOPOFF.DBInfo})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Dates.DateTime})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Dates.DateTime})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Any})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, UInt32})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Array{String, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Int64})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{Type{Array{CHOPOFF.Node, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Array{CHOPOFF.Node, 1}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{CHOPOFF.Node, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Array{CHOPOFF.Node, 1}, CHOPOFF.Node, Int64})
precompile(Tuple{typeof(CHOPOFF.print_treeDB), CHOPOFF.SuffixTreeDB, Int64, Int64, Base.TTY})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#141#142"{Int64, String, String, CHOPOFF.TreeDB}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#141#142"{Int64, String, String, CHOPOFF.TreeDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#141#142"{Int64, String, String, CHOPOFF.TreeDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#138#139"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CHOPOFF.var"#138#139"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.SuffixTreeDB, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{CHOPOFF.Node, 1}, UInt32})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.Node, Symbol})
precompile(Tuple{typeof(Base.:(!=)), UInt32, Int64})
precompile(Tuple{typeof(Base.push!), Array{UInt32, 1}, UInt32})
precompile(Tuple{typeof(Base.:(>)), Int64, UInt8})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#141#142"{Int64, String, String, CHOPOFF.TreeDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#141#142"{Int64, String, String, CHOPOFF.TreeDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:D0, :D1), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.map), Function, NamedTuple{(:D0, :D1), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.any), Function, NamedTuple{(:D0, :D1), Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base._any), DataFrames.var"#836#840", NamedTuple{(:D0, :D1), Tuple{DataType, DataType}}, Base.Colon})
precompile(Tuple{typeof(Base.ntuple), DataFrames.var"#837#841"{NamedTuple{(:D0, :D1), Tuple{DataType, DataType}}, Int64}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:D0, :D1), Tuple{Int64, Int64}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Int64, Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(DataFrames.isthreadsafe), Tuple{Array{Int64, 1}, Array{Int64, 1}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{Type{Ref{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{DataFrames.var"#848#851"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Tuple{Symbol, Symbol}, Tuple{Array{Int64, 1}}, CHOPOFF.var"#18#20"{Int64}, Array{Bool, 1}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}, Base.ReentrantLock, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_rows_with_first_task!), Int64, Int64, Int64, Int64, Tuple{Array{Int64, 1}, Array{Int64, 1}}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}, Array{Bool, 1}, Base.ReentrantLock, CHOPOFF.var"#18#20"{Int64}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Tuple{Symbol, Symbol}, DataFrames.FirstMultiCol})
precompile(Tuple{typeof(DataFrames.wrap_row), NamedTuple{(:D0, :D1), Tuple{Int64, Int64}}, DataFrames.FirstMultiCol})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{InlineStrings.String31, 1}}}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}}}})
precompile(Tuple{typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#678#679", PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#678#679", PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#678#679", PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.Colon})
precompile(Tuple{typeof(DataAPI.refarray), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{UInt32, 1}, Array{InlineStrings.String31, 1}, Base.Dict{InlineStrings.String31, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{UInt32, 1}, Int64})
precompile(Tuple{typeof(DataFrames.map2refs), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Base.Dict{InlineStrings.String31, UInt32}})
precompile(Tuple{typeof(DataAPI.refarray), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Array{UInt32, 1}, Array{InlineStrings.String15, 1}, Base.Dict{InlineStrings.String15, UInt32}})
precompile(Tuple{typeof(DataFrames.map2refs), PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, Base.Dict{InlineStrings.String15, UInt32}})
precompile(Tuple{typeof(DataAPI.refarray), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{UInt32, 1}, Array{InlineStrings.String1, 1}, Base.Dict{InlineStrings.String1, UInt32}})
precompile(Tuple{typeof(DataFrames.map2refs), PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Base.Dict{InlineStrings.String1, UInt32}})
precompile(Tuple{typeof(DataFrames.prepare_on_col), Array{UInt32, 1}, Array{Int64, 1}, Vararg{AbstractArray{T, 1} where T}})
precompile(Tuple{Type{DataFrames.OnCol{T, N} where N where T}, Array{UInt32, 1}, Vararg{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#714#716", Bool, Array{UInt32, 1}, Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#714#716", Bool, Array{Int64, 1}, Array{UInt32, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#714#716", Bool, Array{UInt32, 1}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#715#717"{Int64}, Bool, Array{UInt32, 1}, Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#715#717"{Int64}, Bool, Array{Int64, 1}, Array{UInt32, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#715#717"{Int64}, Bool, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.length), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.falses), Int64})
precompile(Tuple{typeof(Base.isempty), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.issorted), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(DataFrames._semijoin_unsorted), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, Base.BitArray{1}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(!)), Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.floor), Float64})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#88#93"{String, Int64, FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}, CHOPOFF.DBInfo}, typeof(Base.union), Base.IndexLinear, Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSymbols.DNA, 1}, Vararg{Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Base.Iterators.var"#12#14"{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Base.HasEltype, Base.EltypeUnknown})
precompile(Tuple{Base.Iterators.var"#10#11"{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#16#17"{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 2}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{typeof(BioSequences.seq_data_len), Type{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.sort), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.length), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:dt,), Tuple{Int64}}, Type{ProgressMeter.Progress}, Int64})
precompile(Tuple{Type{ProgressMeter.ProgressWrapper{T} where T}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, ProgressMeter.Progress})
precompile(Tuple{typeof(Base.iterate), ProgressMeter.ProgressWrapper{Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#89#94"})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#89#94"}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#89#94"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#89#94"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Base.BitArray{1}, 1}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#89#94"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Base.BitArray{1}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Base.BitArray{1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Base.BitArray{1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{ThreadsX.Implementations.var"##map#73", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.map), Function, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#90#95"}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#90#95"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}, Transducers.PrivateState{Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}, Int64, MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, UInt8})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#90#95"}, Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}}, Transducers.PrivateState{Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}, Int64, Array{UInt8, 1}}, Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#90#95"}, Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}}, Transducers.PrivateState{Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}, Int64, Array{UInt8, 1}}})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{UInt8, 1}})
precompile(Tuple{typeof(BangBang.__appendto!!__), BangBang.NoBang.Empty{Array{T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#90#95"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt8, 1}, Base.SubArray{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#90#95"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#90#95"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.isempty), Array{UInt8, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{UInt8, 1}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Base.reshape), Array{UInt8, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#91#96"}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#91#96"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.next), Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}, Transducers.PrivateState{Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}, Int64, MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, UInt32})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#91#96"}, Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}}, Transducers.PrivateState{Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}, Int64, Array{UInt32, 1}}, Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{CHOPOFF.var"#91#96"}, Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}}, Transducers.PrivateState{Transducers.Reduction{Transducers.Enumerate{Int64}, Transducers.BottomRF{Transducers.AdHocRF{Transducers.var"#150#153"{MicroCollections.UndefArray{Union{}, 1, typeof(MicroCollections.default_factory)}}, typeof(Base.identity), Transducers.var"#rf#152", typeof(Base.identity), typeof(Base.identity), Nothing}}}, Int64, Array{UInt32, 1}}})
precompile(Tuple{typeof(Transducers.AutoObjectsReStacker.restack), Array{UInt32, 1}})
precompile(Tuple{typeof(BangBang.__appendto!!__), BangBang.NoBang.Empty{Array{T, 1} where T}, Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#91#96"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt32, 1}, Base.SubArray{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#91#96"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{UInt32, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#91#96"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.isempty), Array{UInt32, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{UInt32, 1}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Base.reshape), Array{UInt32, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#92#97"}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#92#97"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#92#97"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#92#97"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Bool, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Bool, 1}, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{Type{CHOPOFF.MotifPos}, Array{UInt8, 1}, Array{UInt32, 1}, Base.BitArray{1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}, Int64, Base.BitArray{2}})
precompile(Tuple{typeof(Base.iterate), ProgressMeter.ProgressWrapper{Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Int64})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}, Vararg{Base.BitArray{1}}})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.Math.clamp), Float64, Int64, Int64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.setproperty!), ProgressMeter.Progress, Symbol, Int64})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.hcat), Base.BitArray{1}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.Iterators._piterate), Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#18#19", Tuple{Tuple{BioSymbols.DNA, Int64}, Tuple{BioSymbols.DNA, Int64}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Int64, 1}, Tuple{BioSymbols.DNA, BioSymbols.DNA}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Tuple{Tuple{BioSymbols.DNA, Int64}, Tuple{BioSymbols.DNA, Int64}}})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#90#95"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt8, 1}, Array{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Int64})
precompile(Tuple{typeof(Transducers._foldl_linear_bulk), Transducers.Reduction{Transducers.NoComplete, Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#91#96"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}}, Array{UInt32, 1}, Array{Base.SubArray{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1, Array{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Int64})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}})
precompile(Tuple{typeof(Serialization.deserialize), Serialization.Serializer{Base.IOStream}, Type{Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.MotifDB, Symbol})
precompile(Tuple{typeof(Base.first), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#105#107"{Int64, CHOPOFF.MotifDB}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#105#107"{Int64, CHOPOFF.MotifDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#105#107"{Int64, CHOPOFF.MotifDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#105#107"{Int64, CHOPOFF.MotifDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#105#107"{Int64, CHOPOFF.MotifDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.reshape), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Tuple{Int64}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#106#108"{Int64, Int64, String, String, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.MotifDB}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#106#108"{Int64, Int64, String, String, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.MotifDB}}, Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#106#108"{Int64, Int64, String, String, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.MotifDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#98#101"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CHOPOFF.var"#98#101"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#99#102", Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CHOPOFF.var"#99#102"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#100#103"{Int64}, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CHOPOFF.var"#100#103"{Int64}}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.MotifPos, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Base.BitArray{1}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#106#108"{Int64, Int64, String, String, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.MotifDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#106#108"{Int64, Int64, String, String, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.MotifDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.any), Function, Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{InlineStrings.String31, 1}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#678#679", Array{InlineStrings.String31, 1}, Base.Colon})
precompile(Tuple{typeof(DataAPI.refarray), Array{InlineStrings.String31, 1}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), Array{InlineStrings.String31, 1}, Array{InlineStrings.String31, 1}, Nothing, Nothing})
precompile(Tuple{typeof(DataFrames.prepare_on_col), Array{InlineStrings.String31, 1}, Array{Int64, 1}, Vararg{AbstractArray{T, 1} where T}})
precompile(Tuple{Type{DataFrames.OnCol{T, N} where N where T}, Array{InlineStrings.String31, 1}, Vararg{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.all), Function, Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#714#716", Bool, Array{InlineStrings.String31, 1}, Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#715#717"{Int64}, Bool, Array{InlineStrings.String31, 1}, Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.length), DataFrames.OnCol{Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.isempty), DataFrames.OnCol{Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.issorted), DataFrames.OnCol{Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(DataFrames._semijoin_unsorted), DataFrames.OnCol{Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, DataFrames.OnCol{Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, Base.BitArray{1}, Bool})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{4, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{4, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{4, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{4, UInt8, IndexableBitVectors.SucVector}}, NTuple{4, IndexableBitVectors.SucVector}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.FMIndex{w, T} where T where w}, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{4, UInt8, IndexableBitVectors.SucVector}, Int64, Array{UInt32, 1}, IndexableBitVectors.SucVector, Array{Int64, 1}})
precompile(Tuple{typeof(CHOPOFF.save), CHOPOFF.FMIndexes.FMIndex{4, UInt32}, String})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, NTuple{4, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, Array{IndexableBitVectors.Block, 1}})
precompile(Tuple{typeof(Serialization.serialize), Serialization.Serializer{Base.IOStream}, NTuple{4, Int64}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.GenomeInfo, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64}})
precompile(Tuple{Type{Array{IndexableBitVectors.Block, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.read!), Base.IOStream, Array{IndexableBitVectors.Block, 1}})
precompile(Tuple{Type{Array{UInt32, 1}}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.locateall), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.FMIndexes.FMIndex{4, UInt32}})
precompile(Tuple{typeof(Base.append!), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, NTuple{5, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.length), Base.Iterators.ProductIterator{NTuple{5, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.Iterators.ProductIterator{NTuple{5, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{NTuple{5, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), NTuple{5, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.ProductIterator{NTuple{5, Array{Int64, 1}}}, NTuple{5, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.refpool_and_array), NTuple{25, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{25, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{25, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.first), NTuple{25, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{NTuple{25, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), NTuple{25, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{NTuple{25, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.any), Function, NTuple{25, DataFrames.IntegerRefpool{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{25, DataFrames.IntegerRefpool{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, NTuple{25, DataFrames.IntegerRefarray{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{25, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{25, Array{UInt8, 1}}, NTuple{25, DataFrames.IntegerRefpool{Int64}}, NTuple{25, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{25, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, NTuple{25, DataFrames.IntegerRefpool{Int64}}, NTuple{25, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(!=)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64}}})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{String, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#207#208"{CHOPOFF.PathTemplates, String, String}})
precompile(Tuple{typeof(Base.rem), UInt128, Type{UInt64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#207#208"{CHOPOFF.PathTemplates, String, String}}, Array{String, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#207#208"{CHOPOFF.PathTemplates, String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}, typeof(Base.Broadcast.broadcasted_kwsyntax), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Base.Dict{BioSymbols.DNA, UInt8}, Tuple{Symbol}, NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}}, typeof(CHOPOFF.guide_to_template_format)}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Base.Dict{BioSymbols.DNA, UInt8}, Tuple{Symbol}, NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}}, typeof(CHOPOFF.guide_to_template_format)}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}, typeof(Base.Broadcast.broadcasted_kwsyntax), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Vararg{Any}})
precompile(Tuple{Base.Broadcast.var"##broadcasted_kwsyntax#42", Base.Pairs{Symbol, Base.Dict{BioSymbols.DNA, UInt8}, Tuple{Symbol}, NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}}, typeof(Base.Broadcast.broadcasted_kwsyntax), Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Base.Dict{BioSymbols.DNA, UInt8}, Tuple{Symbol}, NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}}, typeof(CHOPOFF.guide_to_template_format)}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Bool})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Base.Dict{BioSymbols.DNA, UInt8}, Tuple{Symbol}, NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}}, typeof(CHOPOFF.guide_to_template_format)}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Bool}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.reverse!), Array{UInt8, 2}})
precompile(Tuple{typeof(Base.view), Array{UInt8, 2}, Int64, Function})
precompile(Tuple{typeof(Base.:(>)), UInt8, Int64})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.locate), Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, CHOPOFF.FMIndexes.FMIndex{4, UInt32}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(+)), CHOPOFF.FMIndexes.LocationIterator{4, UInt32}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(-)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Any, 1}, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Any, 1}, Int64}}, Int64}}})
precompile(Tuple{typeof(Base.iterate), CHOPOFF.FMIndexes.LocationIterator{4, UInt32}})
precompile(Tuple{typeof(Base.:(>)), UInt8, UInt8})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Int64, Base.Set{Int64}})
precompile(Tuple{typeof(Base.push!), Base.Set{Int64}, Int64})
precompile(Tuple{typeof(Base.reinterpret), Type{BioSymbols.DNA}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.ReinterpretArray{BioSymbols.DNA, 1, UInt8, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, false}})
precompile(Tuple{typeof(Base.string), UInt8})
precompile(Tuple{typeof(Base.iterate), CHOPOFF.FMIndexes.LocationIterator{4, UInt32}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#207#208"{CHOPOFF.PathTemplates, String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#207#208"{CHOPOFF.PathTemplates, String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Nothing, 1}, Array{String, 1}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{InlineStrings.String31, 1}, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{InlineStrings.String31, 1}, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{DataFrames.var"#152#153"{Array{Int64, 1}}, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{DataFrames.var"#152#153"{Array{Int64, 1}}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{InlineStrings.String31, 1}, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, InlineStrings.String31})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, InlineStrings.String1})
precompile(Tuple{Type{Base.Set{T} where T}, Base.UnitRange{Int64}})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{InlineStrings.String15, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{InlineStrings.String1, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.getindex), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{InlineStrings.String31, 1}, Nothing, Nothing})
precompile(Tuple{typeof(DataFrames.prepare_on_col), PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Vararg{AbstractArray{T, 1} where T}})
precompile(Tuple{Type{DataFrames.OnCol{T, N} where N where T}, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Vararg{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.all), Function, Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#714#716", Bool, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base._all_tuple), DataFrames.var"#715#717"{Int64}, Bool, PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.length), DataFrames.OnCol{Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.isempty), DataFrames.OnCol{Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(Base.issorted), DataFrames.OnCol{Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}})
precompile(Tuple{typeof(DataFrames._semijoin_sorted), DataFrames.OnCol{Tuple{PooledArrays.PooledArray{InlineStrings.String31, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, DataFrames.OnCol{Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{CHOPOFF.var"#210#245", Base.Order.ForwardOrdering}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#26#27"{Base.Order.By{CHOPOFF.var"#210#245", Base.Order.ForwardOrdering}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{CHOPOFF.var"#210#245", Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#26#27"{Base.Order.By{CHOPOFF.var"#210#245", Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}}}, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:rev, :by), Tuple{Bool, CHOPOFF.var"#210#245"}}, typeof(Base.sort), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.UnitRange{Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#214#249"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.UnitRange{Int64}, 1}, CHOPOFF.var"#214#249"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CHOPOFF.var"#213#248"}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#215#250"{CHOPOFF.Motif}, Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Base.Generator{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.var"#215#250"{CHOPOFF.Motif}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#220#255", Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Base.Generator{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.var"#220#255"}})
precompile(Tuple{typeof(Base.collect), FASTX.FASTA.Reader{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Reduced{Nothing}, Symbol})
precompile(Tuple{typeof(ThreadsX.foreach), CHOPOFF.var"#222#257"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, String, CHOPOFF.PAMinFMI, Int64, CHOPOFF.GenomeInfo, String, CHOPOFF.Motif}, Base.Iterators.Enumerate{Array{String, 1}}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{CHOPOFF.var"#222#257"{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, String, CHOPOFF.PAMinFMI, Int64, CHOPOFF.GenomeInfo, String, CHOPOFF.Motif}}, Transducers.BottomRF{Transducers.Completing{typeof(ThreadsX.Implementations.return_nothing)}}}, Nothing, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.Iterators.Zip{Tuple{Base.UnitRange{Int64}, Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}}}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{FASTX.FASTA.Record, 1}, Int64})
precompile(Tuple{typeof(CHOPOFF.getchromseq), Bool, FASTX.FASTA.Record})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, 1}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#223#258", Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Base.Generator{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.var"#223#258"}})
precompile(Tuple{typeof(Base.reverse), Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#224#259", Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Base.Generator{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, CHOPOFF.var"#224#259"}})
precompile(Tuple{typeof(Base.reverse), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.Iterators.product), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Vararg{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{Base.Iterators.var"#12#14"{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#10#11"{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#16#17"{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.vec), Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 2}})
precompile(Tuple{typeof(Base.map), Function, Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#225#260", Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CHOPOFF.var"#225#260"}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#226#261"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#227#262"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#228#263"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#231#266"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#232#267"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#235#270", Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Generator{Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, CHOPOFF.var"#235#270"}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#236#271"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#237#272"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#238#273"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#241#276"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#242#277"{CHOPOFF.FMIndexes.FMIndex{4, UInt32}}, typeof(Base.vcat), Base.IndexLinear, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, 1}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:restrict_to_len, :withPAM), Tuple{Int64, Bool}}, typeof(CHOPOFF.build_PathTemplates), CHOPOFF.Motif})
precompile(Tuple{typeof(Base.collect), Tuple{}})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 2}, Array{Union{}, 1}, Int64, Base.BitArray{1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:remove_pam, :restrict_to_len), Tuple{Bool, Int64}}, typeof(CHOPOFF.pushguides!), Array{UInt64, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Bool})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#55#57"{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#55#57"{Int64}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#55#57"{Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#55#57"{Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#55#57"{Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:seed, :max_iterations), Tuple{UInt64, Int64}}, Type{FastFilter.BinaryFuseFilter{UInt32}}, Array{UInt64, 1}})
precompile(Tuple{Type{Ref{T} where T}, FastFilter.BinaryFuseFilter{UInt32}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.in), Tuple{Array{UInt64, 1}, Base.RefValue{FastFilter.BinaryFuseFilter{UInt32}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.in), Tuple{Array{UInt64, 1}, Base.RefValue{FastFilter.BinaryFuseFilter{UInt32}}}}})
precompile(Tuple{Type{CHOPOFF.BinaryFuseFilterDBperChrom{K} where K<:Union{UInt16, UInt32, UInt8}}, CHOPOFF.DBInfo, FastFilter.BinaryFuseFilter{UInt32}, FastFilter.BinaryFuseFilter{UInt32}, String})
precompile(Tuple{typeof(CHOPOFF.save), CHOPOFF.BinaryFuseFilterDBperChrom{UInt32}, String})
precompile(Tuple{Type{CHOPOFF.BinaryFuseFilterDB}, CHOPOFF.DBInfo, CHOPOFF.PathTemplates, Nothing, Int64})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.BinaryFuseFilterDB, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.length), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#286#287"{String, String, String, String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#286#287"{String, String, String, String}}, Array{String, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#286#287"{String, String, String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{String, 1, Array{String, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Base.Dict{BioSymbols.DNA, UInt8}, Tuple{Symbol}, NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}}, typeof(CHOPOFF.guide_to_template_format)}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#281#283", Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, Base.Generator{Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, CHOPOFF.var"#281#283"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#282#284", Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, Base.Generator{Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, CHOPOFF.var"#282#284"}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.BinaryFuseFilterDBperChrom{UInt32}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.in), Array{UInt64, 1}, Base.RefValue{FastFilter.BinaryFuseFilter{UInt32}}})
precompile(Tuple{typeof(Base.to_indices), Array{UInt8, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.BitArray{1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, Array{UInt8, 2}, Base.LogicalIndex{Int64, Base.BitArray{1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{BioSymbols.DNA, 1}, Array{UInt8, 2}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.reverse!), Array{BioSymbols.DNA, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(BioSymbols.iscompatible), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(BioSymbols.iscompatible), Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{BioSymbols.DNA, 2}, Int64, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(BioSymbols.iscompatible), Array{BioSymbols.DNA, 1}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#286#287"{String, String, String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#286#287"{String, String, String, String}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.iterate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{ThreadsX.Implementations.var"##_map#71", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ThreadsX.Implementations._map), Function, Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#122#127"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#122#127"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}}}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#122#127"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Bool}, 1}, 1, Array{Array{Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Bool}, 1}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#122#127"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#122#127"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Base.Iterators.Zip{Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Base.BitArray{1}}}})
precompile(Tuple{typeof(ThreadsX.map), Function, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#123#128"}}}, Symbol})
precompile(Tuple{typeof(Base.:(∘)), Transducers.Enumerate{Int64}, Transducers.Map{CHOPOFF.var"#123#128"}})
precompile(Tuple{typeof(Base.getproperty), Transducers.Map{CHOPOFF.var"#123#128"}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#123#128"}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#123#128"}}}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#123#128"}, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#123#128"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#123#128"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#123#128"}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Bool, 1}})
precompile(Tuple{typeof(ThreadsX.Implementations.reshape_as), Array{Bool, 1}, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Int64})
precompile(Tuple{typeof(Base.Threads.threading_run), CHOPOFF.var"#351#threadsfor_fun#129"{CHOPOFF.var"#351#threadsfor_fun#124#130"{Int64, Array{Int64, 1}, Base.ReentrantLock, Array{Array{CHOPOFF.Offtarget{T, K} where K<:Unsigned where T<:Unsigned, 1}, 1}, Array{Int64, 2}, Int64, CHOPOFF.SuffixDB, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Int64, Base.Threads.Atomic{Bool}, Base.UnitRange{Int64}}}, Bool})
precompile(Tuple{Base.Threads.var"#1#2"{CHOPOFF.var"#351#threadsfor_fun#129"{CHOPOFF.var"#351#threadsfor_fun#124#130"{Int64, Array{Int64, 1}, Base.ReentrantLock, Array{Array{CHOPOFF.Offtarget{T, K} where K<:Unsigned where T<:Unsigned, 1}, 1}, Array{Int64, 2}, Int64, CHOPOFF.SuffixDB, Array{CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, 1}, Int64, Base.Threads.Atomic{Bool}, Base.UnitRange{Int64}}}, Int64}})
precompile(Tuple{Type{CHOPOFF.Offtarget{T, K} where K<:Unsigned where T<:Unsigned}, CHOPOFF.Loc{UInt8, UInt32}, Int64, String, String})
precompile(Tuple{typeof(CHOPOFF.insert_offtarget!), Array{CHOPOFF.Offtarget{T, K} where K<:Unsigned where T<:Unsigned, 1}, CHOPOFF.Offtarget{UInt8, UInt32}, Int64})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, CHOPOFF.Offtarget{UInt8, UInt32}, CHOPOFF.Offtarget{UInt8, UInt32}})
precompile(Tuple{typeof(CHOPOFF.is_in_range), CHOPOFF.Offtarget{UInt8, UInt32}, CHOPOFF.Offtarget{UInt8, UInt32}, Int64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{InlineStrings.String31, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(<=)), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}})
precompile(Tuple{typeof(CHOPOFF.gather_hashes!), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{UInt32, 1}, Array{Bool, 1}, Array{UInt64, 1}, Array{UInt8, 1}, Array{UInt32, 1}, Array{Bool, 1}, UInt8, CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Bool})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#144#145"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#144#145"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#144#145"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Base.UnitRange{Int64}, 1, Array{Base.UnitRange{Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#144#145"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#144#145"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Base.UnitRange{Int64}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(!)), Array{Bool, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.append!), Array{UInt8, 1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.append!), Array{UInt32, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.append!), Array{UInt64, 1}, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{UInt32, 1}, Array{UInt16, 1}})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{UInt32, 1}, Array{UInt16, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{UInt32, 1}, Array{UInt16, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{UInt32, 1}, Array{UInt16, 1}}}})
precompile(Tuple{typeof(Base.sortperm), Array{Tuple{UInt32, UInt16}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Array{Int64, 1}})
precompile(Tuple{Type{CHOPOFF.PrefixHashDB}, CHOPOFF.SymbolicAlignments, Array{UInt32, 1}, Array{UInt16, 1}, Array{UInt8, 1}, Array{UInt32, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(CHOPOFF.build_ambigPrefixHashDB), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{UInt8, 1}, Array{UInt32, 1}, Array{Bool, 1}, Int64, Int64, Type, Type, Type, Nothing, Nothing})
precompile(Tuple{Type{CHOPOFF.AmbigPrefixHashDB}, Nothing, Array{UInt64, 1}, Array{Int64, 1}, Array{UInt16, 1}, Array{UInt8, 1}, Array{UInt32, 1}, Base.BitArray{1}, Nothing, Base.BitArray{1}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.PrefixHashDB, Symbol})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#150#154"{Int64, Array{Int64, 1}, String, Array{Int64, 2}, Int64, DataType, Int64, CHOPOFF.PrefixHashDB}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#150#154"{Int64, Array{Int64, 1}, String, Array{Int64, 2}, Int64, DataType, Int64, CHOPOFF.PrefixHashDB}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#150#154"{Int64, Array{Int64, 1}, String, Array{Int64, 2}, Int64, DataType, Int64, CHOPOFF.PrefixHashDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(CHOPOFF.asUInt), Type{UInt32}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base._similar_for), Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, Type{UInt32}, Base.Generator{Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, CHOPOFF.var"#151#155"{CHOPOFF.PrefixHashDB}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{UInt32, 1}, UInt32, Base.Generator{Base.Slices{Array{UInt8, 2}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{UInt8, 1, Array{UInt8, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, CHOPOFF.var"#151#155"{CHOPOFF.PrefixHashDB}}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(CHOPOFF.potential_ots_idx), Array{UInt32, 1}, Array{UInt64, 1}})
precompile(Tuple{typeof(CHOPOFF.potential_ots_idx), Array{UInt32, 1}, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#152#156"{CHOPOFF.PrefixHashDB}, typeof(Base.vcat), Base.IndexLinear, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt16, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.diff), Array{UInt16, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(!=)), Array{UInt16, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Array{UInt16, 1}, Int64}}})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#153#157", Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}, CHOPOFF.var"#153#157"}})
precompile(Tuple{typeof(Base.vcat), Array{Base.UnitRange{Int64}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt16, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, UInt16})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt64, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.UnitRange{Int64}, 1}, Int64})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#150#154"{Int64, Array{Int64, 1}, String, Array{Int64, 2}, Int64, DataType, Int64, CHOPOFF.PrefixHashDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.getindex), Base.BitArray{1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#150#154"{Int64, Array{Int64, 1}, String, Array{Int64, 2}, Int64, DataType, Int64, CHOPOFF.PrefixHashDB}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.wrap), NamedTuple{(:D0,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.map), Function, NamedTuple{(:D0,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.any), Function, NamedTuple{(:D0,), Tuple{DataType}}})
precompile(Tuple{typeof(Base._any), DataFrames.var"#836#840", NamedTuple{(:D0,), Tuple{DataType}}, Base.Colon})
precompile(Tuple{typeof(Base.ntuple), DataFrames.var"#837#841"{NamedTuple{(:D0,), Tuple{DataType}}, Int64}, Int64})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:D0,), Tuple{Int64}}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{Type{Ref{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{DataFrames.var"#848#851"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Tuple{Symbol}, Tuple{Array{Int64, 1}}, CHOPOFF.var"#18#20"{Int64}, Array{Bool, 1}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}, Base.ReentrantLock, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_rows_with_first_task!), Int64, Int64, Int64, Int64, Tuple{Array{Int64, 1}}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s496"}} where var"#s496"}, Array{Bool, 1}, Base.ReentrantLock, CHOPOFF.var"#18#20"{Int64}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Tuple{Symbol}, DataFrames.FirstMultiCol})
precompile(Tuple{typeof(DataFrames.wrap_row), NamedTuple{(:D0,), Tuple{Int64}}, DataFrames.FirstMultiCol})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{InlineStrings.String31, 1}}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{InlineStrings.String31, 1}}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#66#70"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#66#70"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#59#61"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#66#70"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Base.UnitRange{Int64}, 1}, CHOPOFF.var"#59#61"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#60#62"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#66#70"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.UnitRange{Int64}, 1}, Base.Generator{Array{Base.UnitRange{Int64}, 1}, CHOPOFF.var"#60#62"{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.DBInfo}}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CHOPOFF.var"#66#70"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}})
precompile(Tuple{Type{Transducers.Map{F} where F}, CHOPOFF.var"#65#69"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:basesize,), Tuple{Int64}}, typeof(Transducers.tcollect), Transducers.Map{CHOPOFF.var"#65#69"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CHOPOFF.var"#65#69"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, CHOPOFF.var"#65#69"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Transducers.complete), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#65#69"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.MissingVector})
precompile(Tuple{typeof(Base.length), SentinelArrays.MissingVector})
precompile(Tuple{typeof(DataFrames._preprocess_column), SentinelArrays.MissingVector, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.MissingVector, Int64})
precompile(Tuple{typeof(Base.firstindex), SentinelArrays.MissingVector})
precompile(Tuple{typeof(DataFrames.row_group_slots!), Tuple{SentinelArrays.MissingVector}, Base.Val{false}, Array{Int64, 1}, Bool, Nothing, Bool})
precompile(Tuple{typeof(DataFrames.do_call), CHOPOFF.var"#18#20"{Int64}, Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{SentinelArrays.MissingVector}, Int64})
precompile(Tuple{typeof(Base.getindex), SentinelArrays.MissingVector, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.__inbounds_setindex!), Array{AbstractArray{T, 1} where T, 1}, SentinelArrays.MissingVector, Int64})
precompile(Tuple{Type{DataFrames.DFPerm{O, T} where T<:Tuple{Vararg{AbstractArray{T, 1} where T}} where O<:Union{Tuple{Vararg{Base.Order.Ordering}}, Base.Order.Ordering}}, Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, SentinelArrays.MissingVector}})
precompile(Tuple{typeof(Base.sort!), DataFrames.DataFrame, Base.Sort.MergeSortAlg, DataFrames.DFPerm{Base.Order.ForwardOrdering, Tuple{Array{Int64, 1}, Array{Int64, 1}, SentinelArrays.MissingVector}}})
precompile(Tuple{typeof(Base.isempty), DataFrames.DataFrame})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#109#111"{String, Int64, TwoBit.Reader{Base.IOStream}, CHOPOFF.DBInfo}, typeof(Base.union), Base.IndexLinear, Array{String, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#66#70"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#66#70"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Transducers.var"#254#255"{Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#65#69"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, BangBang.NoBang.Empty{Array{T, 1} where T}, Transducers.CancellableDACContext, Transducers.SizedReducible{Base.SubArray{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1, Array{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64}}})
precompile(Tuple{typeof(Transducers.combine), Transducers.Reduction{Transducers.Map{Transducers.var"#269#270"{Array{T, 1} where T, Transducers.Map{CHOPOFF.var"#65#69"{CHOPOFF.DBInfo, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}}}, Transducers.BottomRF{Transducers.Completing{typeof(BangBang.append!!)}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.refpool_and_array), NTuple{23, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{23, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{23, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.first), NTuple{23, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{NTuple{23, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), NTuple{23, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{NTuple{23, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.any), Function, NTuple{23, DataFrames.IntegerRefpool{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{23, DataFrames.IntegerRefpool{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, NTuple{23, DataFrames.IntegerRefarray{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{23, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{23, Array{UInt8, 1}}, NTuple{23, DataFrames.IntegerRefpool{Int64}}, NTuple{23, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{23, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, NTuple{23, DataFrames.IntegerRefpool{Int64}}, NTuple{23, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames._innerjoin_sorted), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#136#137"{String, Int64, TwoBit.Reader{Base.IOStream}, CHOPOFF.DBInfo}, typeof(Base.union), Base.IndexLinear, Array{String, 1}})
precompile(Tuple{typeof(Base.println), Base.TTY, String, Vararg{Any}})
precompile(Tuple{typeof(DataFrames._semijoin_sorted), DataFrames.OnCol{Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, DataFrames.OnCol{Tuple{Array{InlineStrings.String31, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, Base.BitArray{1}})
precompile(Tuple{typeof(Base._mapreduce), CHOPOFF.var"#88#93"{String, Int64, TwoBit.Reader{Base.IOStream}, CHOPOFF.DBInfo}, typeof(Base.union), Base.IndexLinear, Array{String, 1}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Base.Iterators.var"#12#14"{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#10#11"{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#16#17"{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 3}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA, BioSymbols.DNA, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.refpool_and_array), NTuple{26, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{26, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{26, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.first), NTuple{26, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{NTuple{26, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), NTuple{26, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{NTuple{26, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.any), Function, NTuple{26, DataFrames.IntegerRefpool{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{26, DataFrames.IntegerRefpool{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, NTuple{26, DataFrames.IntegerRefarray{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{26, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{26, Array{UInt8, 1}}, NTuple{26, DataFrames.IntegerRefpool{Int64}}, NTuple{26, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{26, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, NTuple{26, DataFrames.IntegerRefpool{Int64}}, NTuple{26, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), Array{InlineStrings.String31, 1}, Array{UInt32, 1}, Array{InlineStrings.String31, 1}, Base.Dict{InlineStrings.String31, UInt32}})
precompile(Tuple{typeof(DataFrames.map2refs), Array{InlineStrings.String31, 1}, Base.Dict{InlineStrings.String31, UInt32}})
precompile(Tuple{typeof(DataFrames._semijoin_sorted), DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, DataFrames.OnCol{Tuple{Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}, Array{Int64, 1}, Array{UInt32, 1}}, 5}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.parent), SentinelArrays.SentinelArray{InlineStrings.String1, 1, InlineStrings.String1, Base.Missing, Array{InlineStrings.String1, 1}}})
precompile(Tuple{typeof(Base.setproperty!), CSV.Column, Symbol, Array{InlineStrings.String1, 1}})
precompile(Tuple{typeof(Base.length), Array{InlineStrings.String1, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{InlineStrings.String1, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{InlineStrings.String1, 1}, Int64})
precompile(Tuple{typeof(Base.firstindex), Array{InlineStrings.String1, 1}})
precompile(Tuple{typeof(CHOPOFF.isinclusive), BioSymbols.DNA, BioSymbols.DNA})
precompile(Tuple{typeof(CHOPOFF.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CHOPOFF.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, typeof(CHOPOFF.isinclusive)})
precompile(Tuple{typeof(CHOPOFF.commonprefix), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, typeof(BioSymbols.iscompatible)})
precompile(Tuple{typeof(CHOPOFF.hamming), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CHOPOFF.hamming), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, typeof(CHOPOFF.isinclusive)})
precompile(Tuple{typeof(CHOPOFF.levenshtein), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, typeof(CHOPOFF.isinclusive)})
precompile(Tuple{typeof(CHOPOFF.pa_sa), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.Aln, Symbol})
precompile(Tuple{typeof(Base.rand), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(CHOPOFF.getseq), Int64})
precompile(Tuple{typeof(CHOPOFF.align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(CHOPOFF.hamming), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, typeof(Base.isequal)})
precompile(Tuple{typeof(CHOPOFF.getseq)})
precompile(Tuple{typeof(Base.copy), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.lastindex), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(CHOPOFF.prefix_align), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64, Int64})
precompile(Tuple{typeof(CHOPOFF.suffix_align!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.:(==)), CHOPOFF.Aln, CHOPOFF.Aln})
precompile(Tuple{typeof(Base.:(!=)), CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{Main.var"#mutate_suffix!#9", BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64})
precompile(Tuple{typeof(CHOPOFF.suffix_align!), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, CHOPOFF.PrefixAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Int64})
precompile(Tuple{typeof(Base.:(!=)), CHOPOFF.Aln, CHOPOFF.Aln})
precompile(Tuple{typeof(Base.lastindex), Array{String, 1}})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, String, String, Vararg{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat), Array{String, 1}, String, Vararg{String}})
precompile(Tuple{Base.var"##cat#159", Base.Val{1}, typeof(Base.cat), Array{String, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, Array{String, 1}, String, Vararg{String}})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{String}, Array{String, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.cat_size_shape), Tuple{Bool}, Array{String, 1}, String, Vararg{String}})
precompile(Tuple{typeof(Base._cat_size_shape), Tuple{Bool}, Tuple{Int64}, String, String, Vararg{String}})
precompile(Tuple{typeof(Base._cat_size_shape), Tuple{Bool}, Tuple{Int64}, String})
precompile(Tuple{typeof(Base.cat_similar), Array{String, 1}, Type{String}, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{String, 1}, Tuple{Int64}, Tuple{Bool}, Array{String, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{String, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Array{String, 1}, String, Vararg{String}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{String, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, String, String, Vararg{String}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{String, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, String})
precompile(Tuple{typeof(Base.Filesystem.joinpath), Array{String, 1}})
precompile(Tuple{Type{CHOPOFF.Motif}, String})
precompile(Tuple{Type{CHOPOFF.DBInfo}, String, String, CHOPOFF.Motif})
precompile(Tuple{Type{Array{String, 1}}})
precompile(Tuple{typeof(CHOPOFF.gatherofftargets!), Array{String, 1}, CHOPOFF.DBInfo})
precompile(Tuple{typeof(CHOPOFF.gatherofftargets!), Array{UInt64, 1}, CHOPOFF.DBInfo})
precompile(Tuple{typeof(Base.:(==)), Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{UInt64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{UInt64, 1}, Int64}}}}})
precompile(Tuple{Type{Array{UInt128, 1}}})
precompile(Tuple{typeof(CHOPOFF.gatherofftargets!), Array{UInt128, 1}, CHOPOFF.DBInfo})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{UInt128}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt128}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}})
precompile(Tuple{typeof(Base.isequal), BioSymbols.DNA})
precompile(Tuple{typeof(Base.:(*)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>>)), UInt32, UInt8})
precompile(Tuple{typeof(Base.:(+)), UInt32, UInt32})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{Type{UInt128}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{UInt128, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{UInt128, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{UInt128, 1}, Int64}}}}})
precompile(Tuple{Type{NamedTuple{(:alphabet,), T} where T<:Tuple}, Tuple{Base.Dict{BioSymbols.DNA, UInt64}}})
precompile(Tuple{typeof(CHOPOFF.asUInt), Type{UInt64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.:(==)), UInt64, UInt64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:distance,), Tuple{Int64}}, Type{CHOPOFF.Motif}, String})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.refpool_and_array), NTuple{4, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{4, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{NTuple{4, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.first), NTuple{4, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{NTuple{4, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), NTuple{4, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{NTuple{4, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.any), Function, NTuple{4, DataFrames.IntegerRefpool{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{4, DataFrames.IntegerRefpool{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, NTuple{4, DataFrames.IntegerRefarray{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), NTuple{4, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{4, Array{UInt8, 1}}, NTuple{4, DataFrames.IntegerRefpool{Int64}}, NTuple{4, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots!), NTuple{4, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, NTuple{4, DataFrames.IntegerRefpool{Int64}}, NTuple{4, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(DataFrames.refpool_and_array), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(DataFrames.refpool_and_array), Tuple{Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.first), Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.last), Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}}}}})
precompile(Tuple{typeof(Base.any), Function, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}}, Base.Colon})
precompile(Tuple{typeof(Base.any), Function, Tuple{DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnothing), Tuple{DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Colon})
precompile(Tuple{typeof(DataFrames.row_group_slots!), Tuple{Array{UInt8, 1}, Array{UInt8, 1}, Array{UInt8, 1}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}}, Tuple{DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots!), Tuple{DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefpool{Int64}}, Tuple{DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}, DataFrames.IntegerRefarray{Array{UInt8, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool, Bool})
precompile(Tuple{Type{Test.Threw}, Any, Union{Nothing, Array{Any, 1}}, LineNumberNode})
precompile(Tuple{typeof(Test.do_test_throws), Test.ExecutionResult, Any, Any})
precompile(Tuple{typeof(Base.getproperty), CHOPOFF.PathTemplates, Symbol})
precompile(Tuple{typeof(Base.maximum), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.repeat), Array{Char, 1}, Int64})
precompile(Tuple{typeof(Combinatorics.multiset_permutations), Array{Char, 1}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#10#12", Combinatorics.MultiSetPermutations{Array{Char, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Combinatorics.MultiSetPermutations{Array{Char, 1}}, Main.var"#10#12"}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{6}})
precompile(Tuple{Type{NamedTuple{(:alphabet,), T} where T<:Tuple}, Tuple{Base.Dict{BioSymbols.DNA, UInt8}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:alphabet,), Tuple{Base.Dict{BioSymbols.DNA, UInt8}}}, typeof(CHOPOFF.guide_to_template_format), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.reinterpret), Type{BioSymbols.DNA}, Array{UInt8, 2}})
precompile(Tuple{typeof(Base.eachrow), Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}})
precompile(Tuple{typeof(Base.map), Type, Base.Slices{Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{BioSymbols.DNA, 1, Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.Slices{Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{BioSymbols.DNA, 1, Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Base.Slices{Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{BioSymbols.DNA, 1, Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, Base.Generator{Base.Slices{Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}, Tuple{Int64, Base.Colon}, Tuple{Base.OneTo{Int64}}, Base.SubArray{BioSymbols.DNA, 1, Base.ReinterpretArray{BioSymbols.DNA, 2, UInt8, Array{UInt8, 2}, false}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, 1}, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#11#14"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}, Main.var"#11#14"{Int64, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(==)), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{UInt8, 1}, Int64}}})
precompile(Tuple{typeof(Base.setdiff), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{Type{Base.Set{T} where T}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Base.Set{Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.IOStream}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Base.IOStream}, Int64, Int64})
precompile(Tuple{typeof(Base.vect), BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Vararg{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{Type{Main.TestSeq}, Bool, Array{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, 1}})
precompile(Tuple{typeof(CHOPOFF.save), Main.TestSeq, String})
precompile(Tuple{typeof(Base.getproperty), Main.TestSeq, Symbol})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(CHOPOFF.setdist), CHOPOFF.Motif, Int64})
precompile(Tuple{typeof(CHOPOFF.combinestrings), String, String})
precompile(Tuple{typeof(Base.length), CHOPOFF.Motif})
precompile(Tuple{typeof(Base.isequal), CHOPOFF.Motif, CHOPOFF.Motif})
precompile(Tuple{typeof(Base.show), CHOPOFF.Motif})
precompile(Tuple{typeof(Base.show), Base.TTY, Any})
precompile(Tuple{typeof(Base.print), CHOPOFF.Motif})
precompile(Tuple{typeof(Base.print), Base.TTY, CHOPOFF.Motif})
precompile(Tuple{typeof(CHOPOFF.display_motif), CHOPOFF.Motif})
precompile(Tuple{Type{CHOPOFF.Loc{UInt8, UInt32}}, Int64, Int64, Bool})
precompile(Tuple{Type{Array{CHOPOFF.Offtarget{T, K} where K<:Unsigned where T<:Unsigned, 1}}})
precompile(Tuple{Type{CHOPOFF.Loc{T, K} where K<:Unsigned where T<:Unsigned}, UInt8, UInt8, Bool})
precompile(Tuple{Type{CHOPOFF.Offtarget{T, K} where K<:Unsigned where T<:Unsigned}, CHOPOFF.Loc{UInt8, UInt8}, Int64, String, String})
precompile(Tuple{typeof(CHOPOFF.insert_offtarget!), Array{CHOPOFF.Offtarget{T, K} where K<:Unsigned where T<:Unsigned, 1}, CHOPOFF.Offtarget{UInt8, UInt8}, Int64})
precompile(Tuple{typeof(Base.length), Array{CHOPOFF.Offtarget{T, K} where K<:Unsigned where T<:Unsigned, 1}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, CHOPOFF.Offtarget{UInt8, UInt8}, CHOPOFF.Offtarget{UInt8, UInt8}})
precompile(Tuple{typeof(CHOPOFF.is_in_range), CHOPOFF.Offtarget{UInt8, UInt8}, CHOPOFF.Offtarget{UInt8, UInt8}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Nothing}, Int64, Int64})
precompile(Tuple{typeof(Base.parse), Type{Int128}, String})
precompile(Tuple{typeof(CHOPOFF.safeadd), UInt16, UInt16})
precompile(Tuple{Type{Unsigned}, Int128})
precompile(Tuple{typeof(CHOPOFF.smallestutype), UInt128})
precompile(Tuple{typeof(CHOPOFF.base_to_idx), Char})
precompile(Tuple{typeof(CHOPOFF.minkmersize), Int64, Int64})
precompile(Tuple{Type{Base.UnitRange{T} where T<:Real}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Base.UnitRange{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:ambig_max,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), UInt16, UInt16})
precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.isempty), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.UnitRange{Int64}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{UInt8}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt8, Int64})
precompile(Tuple{typeof(CHOPOFF.getseq), Int64, Array{Char, 1}})
precompile(Tuple{Type{String}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{typeof(Base.convert), Type{UInt16}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt16, Int64})
precompile(Tuple{typeof(Base.convert), Type{UInt32}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, UInt32, Int64})
precompile(Tuple{typeof(Base.Iterators._piterate), Array{BioSymbols.DNA, 1}, Array{BioSymbols.DNA, 1}, Vararg{Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Base.Iterators.var"#10#11"{Tuple{Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#16#17"{Tuple{Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{Tuple{Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{BioSymbols.DNA}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{Tuple{BioSymbols.DNA}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{Tuple{BioSymbols.DNA}, 1}}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, NTuple{4, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Base.Iterators.var"#12#14"{NTuple{4, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#10#11"{NTuple{4, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#16#17"{NTuple{4, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{NTuple{4, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{NTuple{4, BioSymbols.DNA}, 4}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{NTuple{4, BioSymbols.DNA}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{NTuple{4, BioSymbols.DNA}, 1}}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, NTuple{5, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Base.Iterators.var"#12#14"{NTuple{5, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#10#11"{NTuple{5, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#16#17"{NTuple{5, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{NTuple{5, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{NTuple{5, BioSymbols.DNA}, 5}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{NTuple{5, BioSymbols.DNA}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{NTuple{5, BioSymbols.DNA}, 1}}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, NTuple{6, Array{BioSymbols.DNA, 1}}})
precompile(Tuple{Base.Iterators.var"#12#14"{NTuple{6, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#10#11"{NTuple{6, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{Base.Iterators.var"#16#17"{NTuple{6, Array{BioSymbols.DNA, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.ProductIterator{NTuple{6, Array{BioSymbols.DNA, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{NTuple{6, BioSymbols.DNA}, 6}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Array{NTuple{6, BioSymbols.DNA}, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}, Tuple{Array{NTuple{6, BioSymbols.DNA}, 1}}}})
precompile(Tuple{typeof(Base.isempty), Base.Set{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Int64}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{w, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned where w}, Array{UInt8, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{8, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{Type{IntArrays.IntArray{8, T, 1} where T}, Array{UInt8, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{8, UInt8, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}}, NTuple{8, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.getindex), CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt8, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices.select), UInt8, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices.freq), UInt8, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{8, UInt8, IndexableBitVectors.SucVector}, Int64, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{w, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned where w}, Array{UInt64, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{64, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt64, 1}})
precompile(Tuple{typeof(IntArrays.mask), Type{UInt64}, Int64})
precompile(Tuple{Type{IntArrays.IntArray{64, T, 1} where T}, Array{UInt64, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{64, UInt64, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}}, NTuple{64, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.getindex), CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{UInt64, 1}})
precompile(Tuple{typeof(Base.length), Array{UInt64, 1}})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt64, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#324#325"{Main.var"#16#22"{UInt64}}, typeof(Base.add_sum), Int64, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices.select), UInt64, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{64, UInt64, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt64, Array{UInt64, 1}, Int64})
precompile(Tuple{typeof(Base.length), CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Int64, Array{UInt8, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#324#325"{Main.var"#17#23"{UInt8}}, typeof(Base.add_sum), Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt8}, UInt8})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices.select), UInt8, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{2, UInt8, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt8, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{UInt32}, Int64})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{17, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt32, 1}})
precompile(Tuple{typeof(IntArrays.mask), Type{UInt32}, Int64})
precompile(Tuple{Type{IntArrays.IntArray{17, T, 1} where T}, Array{UInt32, 1}})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices._build!), Type{IndexableBitVectors.SucVector}, IntArrays.IntArray{17, UInt32, 1}, Array{IndexableBitVectors.SucVector, 1}})
precompile(Tuple{Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}}, NTuple{17, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.length), CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}})
precompile(Tuple{typeof(Base.lastindex), Array{UInt32, 1}})
precompile(Tuple{typeof(Base.getindex), CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}})
precompile(Tuple{typeof(IndexableBitVectors.rank), UInt32, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt32, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.count), Function, Array{UInt32, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Int64, Array{UInt32, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#324#325"{Main.var"#18#24"{UInt32}}, typeof(Base.add_sum), Int64, Array{UInt32, 1}})
precompile(Tuple{typeof(Base.iterate), Base.UnitRange{UInt32}, UInt32})
precompile(Tuple{typeof(CHOPOFF.FMIndexes.WaveletMatrices.select), UInt32, CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{17, UInt32, IndexableBitVectors.SucVector}, Int64})
precompile(Tuple{typeof(Main.seq_select), UInt32, Array{UInt32, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:destructive,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:destructive,), Tuple{Bool}}, Type{CHOPOFF.FMIndexes.WaveletMatrices.WaveletMatrix{2, T, B} where B<:Union{Base.BitArray{1}, IndexableBitVectors.AbstractIndexableBitVector} where T<:Unsigned}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.rand), Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#324#325"{Main.var"#19#25"{UInt8}}, typeof(Base.add_sum), Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#324#325"{Main.var"#20#26"{UInt8}}, typeof(Base.add_sum), Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.rand), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.mapfoldl_impl), Base.var"#324#325"{Main.var"#21#27"{UInt8}}, typeof(Base.add_sum), Int64, Array{UInt8, 1}})
